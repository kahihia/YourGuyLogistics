/*! Vendor-Webaap - v0.0.0 - 2016-03-09 */
!function() {
    "use strict";
    var a = function(a, b, c, d, e) {
        this.loader = !1, this.userLogin = function() {
            this.loader = !0;
            var f = this, g = {
                username: this.username,
                password: this.password
            };
            b.login(g).then(function(b) {
                d.token = b.data.payload.data.auth_token, c.$refresh().then(function(b) {
                    b.role === e.userRole.OPS_MANAGER || b.role === e.userRole.OPS ? a.go("home.opsorder") : b.role === e.userRole.VENDOR ? a.go("home.order") : b.role === e.userRole.HR && a.go("home.dgList");
                });
            }, function(a) {
                f.loader = !1, f.error_message = a.data.error.message;
            });
        };
    };
    angular.module("login", []).config([ "$stateProvider", function(a) {
        a.state("login", {
            url: "/login",
            templateUrl: "/static/modules/login/login.html",
            controllerAs: "login",
            controller: "LoginCntrl",
            resolve: {
                UserProfile: "UserProfile",
                access: [ "Access", function(a) {
                    return a.isAnonymous();
                } ]
            }
        });
    } ]).controller("LoginCntrl", [ "$state", "AuthService", "UserProfile", "$localStorage", "constants", a ]);
}(), function() {
    "use strice";
    var a = function(a, b) {
        return {
            login: function(c) {
                return a.post(b.v3baseUrl + "login/", c);
            }
        };
    };
    angular.module("login").factory("AuthService", [ "$http", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g) {
        // Show tabs page accorfing to the credentials.
        var h = this;
        this.tabs = f.permissible_tabs[g.$getUserRole()], this.user_name = g.$getUsername();
        /*
			confirm: an object to specify all the parameters for logout confirmation dialog box.
		*/
        var i = d.confirm().parent(angular.element(document.querySelector("#body"))).clickOutsideToClose(!1).title("Are you sure you want to Sign Out?").textContent("After this you will be redirected to login page.").ariaLabel("Sign Out").targetEvent().ok("Sign Out!").cancel("Not Now").openFrom("#logout-button").closeTo("#logout-button");
        /*
			toggle the side navigation bar which shows different tabs available.
			this funvtion is used be every child page to toggl to sidebar.
		*/
        this.toggleSideNav = function() {
            c("left").toggle();
        }, /*
			@logout: function to logut the user and redirect to login page.
		*/
        this.logout = function() {
            g.$clearUserRole(), g.$refresh().then(function(a) {
                b.go("login");
            });
        }, /*
			@showLogoutDialog: function to show the confirmation dialog box when logout button is clicked.
		*/
        this.showLogoutDialog = function() {
            d.show(i).then(function() {
                h.logout();
            });
        }, a.$on("errorOccured", function() {
            a.errorMessage && e.show({
                controller: "ErrorToastCntrl",
                controllerAs: "errorToast",
                templateUrl: "/static/modules/home/error-toast-template.html",
                hideDelay: 6e3,
                position: "top right"
            });
        });
    };
    angular.module("home", []).config([ "$stateProvider", function(a) {
        a.state("home", {
            url: "/home",
            templateUrl: "/static/modules/home/home.html",
            controllerAs: "home",
            controller: "homeCntrl",
            resolve: {
                access: [ "Access", function(a) {
                    return a.isAuthenticated();
                } ],
                UserProfile: "UserProfile"
            }
        });
    } ]).controller("homeCntrl", [ "$rootScope", "$state", "$mdSidenav", "$mdDialog", "$mdToast", "constants", "UserProfile", a ]).controller("ErrorToastCntrl", [ "$mdToast", "$rootScope", function(a, b) {
        this.msg = b.errorMessage, this.closeToast = function() {
            a.hide();
        };
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {};
    angular.module("forbidden", []).config([ "$stateProvider", function(a) {
        a.state("forbidden", {
            url: "/forbidden",
            templateUrl: "/static/modules/forbidden/forbidden.html",
            controllerAs: "forbidden",
            controller: "forbiddenCntrl"
        });
    } ]).controller("forbiddenCntrl", [ "$state", a ]);
}(), function() {
    "use strict";
    // Declare all the app level modules which depend on the different filters and services
    angular.module("ygVendorApp", [ "ngMaterial", "ngMessages", "ui.router", "ngStorage", "ngResource", "base64", "login", "home", "order", "deliveryguy", "vendor", "forbidden" ]).config([ "$urlRouterProvider", "$locationProvider", "$resourceProvider", "$mdThemingProvider", "roleProvider", function(a, b, c, d, e) {
        // For any unmatched url, redirect to /home
        a.otherwise("/home"), b.html5Mode(!0).hashPrefix("!"), c.defaults.stripTrailingSlashes = !1, 
        e.$get().$setUserRole(), d.definePalette("ygBlue", {
            "50": "EEFDFD",
            "100": "E9F5F5",
            "200": "C8EEF8",
            "300": "89DAF1",
            "400": "6DD2ED",
            "500": "52C9EA",
            "600": "37C0E7",
            "700": "1CB8E3",
            "800": "18A2CB",
            "900": "158CAD",
            A100: "C4EEF9",
            A200: "78D7EF",
            A400: "1FC0E7",
            A700: "31AEF7",
            contrastDefaultColor: "light",
            // whether, by default, text (contrast)
            // on this palette should be dark or light
            contrastDarkColors: [ "50", "100", //hues which contrast should be 'dark' by default
            "200", "300", "400", "A100" ],
            contrastLightColors: void 0
        }), d.definePalette("ygOrange", {
            "50": "FFF9F1",
            "100": "FF7CEC",
            "200": "FFEED6",
            "300": "FDD9A6",
            "400": "FDCD88",
            "500": "FCC06A",
            "600": "FBB34C",
            "700": "FBA72E",
            "800": "FA9A10",
            "900": "E78A05",
            A100: "FFF6CF",
            A200: "FFF0C7",
            A400: "FDD393",
            A700: "FBB134",
            contrastDefaultColor: "dark",
            // whether, by default, text (contrast)
            // on this palette should be dark or light
            contrastDarkColors: [ "50", "100", //hues which contrast should be 'dark' by default
            "200", "300", "400", "A100" ],
            contrastLightColors: void 0
        }), d.theme("ygBlueTheme").primaryPalette("ygBlue", {
            "default": "700",
            "hue-1": "100",
            // use shade 100 for the <code>md-hue-1</code> class
            "hue-2": "600",
            // use shade 600 for the <code>md-hue-2</code> class
            "hue-3": "A100"
        }).accentPalette("ygOrange", {
            "default": "500"
        }).warnPalette("red"), d.setDefaultTheme("ygBlueTheme");
    } ]);
}(), function() {
    "use strice";
    var a = {
        role: "",
        token: ""
    };
    angular.module("ygVendorApp").constant("UserData", a);
}(), function() {
    "use strict";
    var a = {
        operations: {
            order: !0,
            dg: !0,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        },
        vendor: {
            order: !0,
            dg: !1,
            vendor: !1,
            reports: !0,
            COD: !1,
            customer: !0,
            products: !0,
            feedback: !0,
            tutorial: !0,
            notification: !1
        },
        hr: {
            order: !1,
            dg: !0,
            vendor: !0,
            reports: !1,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !1,
            tutorial: !1,
            notification: !1
        },
        operations_manager: {
            order: !0,
            dg: !0,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        },
        accounts: {
            order: !0,
            dg: !0,
            vendor: !0,
            reports: !0,
            COD: !0,
            customer: !1,
            products: !1,
            feedback: !1,
            tutorial: !1,
            notification: !1
        },
        sales: {
            order: !0,
            dg: !0,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !1
        },
        sales_manager: {
            order: !0,
            dg: !0,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        }
    }, b = [ {
        status: "Intransit",
        value: "INTRANSIT"
    }, {
        status: "Queued",
        value: "QUEUED",
        selected: !1
    }, {
        status: "Delivered",
        value: "DELIVERED",
        selected: !1
    }, {
        status: "Order Placed",
        value: "ORDER_PLACED",
        selected: !1
    }, {
        status: "Pickup Attempted",
        value: "PICKUPATTEMPTED",
        selected: !1
    }, {
        status: "Deliver Attempted",
        value: "DELIVERYATTEMPTED",
        selected: !1
    }, {
        status: "Cancelled",
        value: "CANCELLED",
        selected: !1
    }, {
        status: "Rejected",
        value: "REJECTED",
        selected: !1
    } ], c = [ {
        status: "All",
        value: "ALL"
    }, {
        status: "Checked-In",
        value: "ONLY_CHECKEDIN"
    }, {
        status: "Not Checked-In",
        value: "NOT_CHECKEDIN"
    }, {
        status: "CheckedIn & CheckedOut",
        value: "CHECKEDIN_AND_CHECKEDOUT"
    } ], d = [ {
        value: "00 AM - 06 AM ",
        time: {
            start_time: 1,
            end_time: 6
        }
    }, {
        value: "06 AM - 12 PM",
        time: {
            start_time: 6,
            end_time: 12
        }
    }, {
        value: "12 PM - 06 PM",
        time: {
            start_time: 12,
            end_time: 18
        }
    }, {
        value: "06 PM - 12 AM",
        time: {
            start_time: 18,
            end_time: 23
        }
    } ], e = {
        v1baseUrl: "/api/v1/",
        v2baseUrl: "/api/v2/",
        v3baseUrl: "/api/v3/",
        userRole: {
            OPS: "operations",
            VENDOR: "vendor",
            HR: "hr",
            OPS_MANAGER: "operations_manager",
            ACCOUNTS: "accounts",
            SALES: "sales",
            SALES_MANAGER: "sales_manager"
        },
        status: b,
        time: d,
        dg_status: c,
        permissible_tabs: a
    };
    angular.module("ygVendorApp").constant("constants", e);
}(), function() {
    "use strict";
    var a = function(a, b) {
        var c = {
            OK: 200,
            UNAUTHORIZED: 401,
            FORBIDDEN: 403,
            hasRole: function(d) {
                var e = a.defer();
                return b.then(function(a) {
                    a.$hasRole(d) ? e.resolve(c.OK) : a.$isAnonymous() ? e.reject(c.UNAUTHORIZED) : e.reject(c.FORBIDDEN);
                }), e.promise;
            },
            hasAnyRole: function(d) {
                var e = a.defer();
                return b.then(function(a) {
                    a.$hasAnyRole(d) ? e.resolve(c.OK) : a.$isAnonymous() ? e.reject(c.UNAUTHORIZED) : e.reject(c.FORBIDDEN);
                }), e.promise;
            },
            isAuthenticated: function() {
                var d = a.defer();
                return b.then(function(a) {
                    a.$isAuthenticated() ? d.resolve(c.Ok) : d.reject(c.UNAUTHORIZED);
                }), d.promise;
            },
            isAnonymous: function() {
                var d = a.defer();
                return b.then(function(a) {
                    a.$isAnonymous() ? d.resolve(c.OK) : d.reject(c.FORBIDDEN);
                }), d.promise;
            }
        };
        return c;
    };
    angular.module("ygVendorApp").factory("Access", [ "$q", "UserProfile", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            dg: a(b.v3baseUrl + "deliveryguy/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !0
                },
                $update: {
                    url: b.v3baseUrl + "deliveryguy/:id/edit_dg_details/",
                    method: "PUT"
                },
                attendance: {
                    url: b.v3baseUrl + "deliveryguy/:id/attendance/",
                    method: "PUT"
                },
                associated_dgs: {
                    url: b.v3baseUrl + "deliveryguy/:id/tl_associated_dgs/",
                    method: "GET"
                },
                promoteToTL: {
                    url: b.v3baseUrl + "deliveryguy/:id/promote_to_teamlead/",
                    method: "PUT"
                }
            }),
            dgPageQuery: a(b.v3baseUrl + "deliveryguy/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgTeamLeadQuery: a(b.v3baseUrl + "deliveryguy/teamleads/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgOpsManagerQuery: a(b.v3baseUrl + "deliveryguy/ops_executives/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgServicablePincodes: a(b.v3baseUrl + "servicible_pincodes/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgsAttendance: a(b.v3baseUrl + "deliveryguy/download_attendance/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("DeliveryGuy", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getOrders: a(b.v3baseUrl + "order/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            assignOrders: a(b.v3baseUrl + "order/assign_orders/", {}, {
                assign: {
                    method: "PUT"
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("Order", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return a(b.v3baseUrl + "profile/", {}, {
            profile: {
                method: "GET",
                transformResponse: function(a, b) {
                    var c = angular.fromJson(a);
                    return c.payload ? (c.payload.data.is_authenticated = c.success, c.payload.data) : c;
                }
            }
        });
    };
    angular.module("ygVendorApp").factory("Profile", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return a(b.v3baseUrl + "vendor/:id/", {
            id: "@id"
        }, {
            profile: {
                method: "GET"
            },
            query: {
                method: "GET",
                isArray: !1
            }
        });
    };
    angular.module("ygVendorApp").factory("Vendor", [ "$resource", "constants", a ]);
}(), // (function(){
// 	'use strict';
// 	var DgList = function ($q,DeliverGuy){
// 		var deliveryguy = {};
// 		var fetchdg = function() {
// 			var deferred = $q.defer();
// 			DeliverGuy.dgListQuery.query(function (response) {
// 				deferred.resolve(angular.extend(deliveryguy, {
// 					dgs : response,
// 					$refresh: fetchdg,
// 				}));
// 			}, function (error){
// 				deferred.reject(angular.extend(deliveryguy , error ,{
// 					$refresh : fetchdg,
// 				}));
// 			});
// 			return deferred.promise;
// 		};
// 		return fetchdg();
// 	};
// 	angular.module('ygVendorApp')
// 	.factory('DgList', [
// 		'$q',
// 		'DeliverGuy', 
// 		DgList
// 	]);
// })();
function() {
    "use strict";
    var a = function(a, b, c, d) {
        var e = {
            responseError: function(e) {
                e.data.error && (d.errorMessage = e.data.error.message);
                var f = a.defer();
                return 401 === e.status || 403 === e.status ? (b.$reset(), c.path("/login")) : 500 === e.status && (d.errorMessage = "Something Went Wrong"), 
                d.$broadcast("errorOccured"), f.reject(e), f.promise;
            }
        };
        return e;
    }, b = function(a, b, c, d) {
        a.$on("$stateChangeError", function(a, e, f, g, h, i) {
            angular.element(d[0].getElementsByClassName("request-loader")).addClass("request-loader-hidden"), 
            i == b.UNAUTHORIZED ? c.go("login") : i == b.FORBIDDEN && c.go("forbidden");
        }), a.$on("$stateChangeStart", function(a, b, c, e, f) {
            angular.element(d[0].getElementsByClassName("request-loader")).removeClass("request-loader-hidden");
        }), a.$on("$stateChangeSuccess", function(b, c, e, f, g) {
            a.previousState = {
                state: f.name,
                params: g
            }, angular.element(d[0].getElementsByClassName("request-loader")).addClass("request-loader-hidden");
        });
    };
    angular.module("ygVendorApp").factory("errorHandler", [ "$q", "$localStorage", "$location", "$rootScope", a ]).config([ "$httpProvider", function(a) {
        a.interceptors.push("errorHandler");
    } ]).run([ "$rootScope", "Access", "$state", "$document", b ]);
}(), function() {
    "use strict";
    /*
		A service to handle and move to the previous state with all the url parameters,
		this fucntion uses the rootscope previousState object and redirects from the current page 
		to the previous page, and if the page is reloaded or the previous state is empty it returns 
		a boolean data to do validation check and handle the edge case.
	*/
    var a = function(a, b) {
        return {
            isAvailable: function() {
                return !(!a.previousState.state || "" === a.previousState.state);
            },
            redirectToPrevious: function() {
                b.go(a.previousState.state, a.previousState.params);
            }
        };
    };
    angular.module("ygVendorApp").factory("PreviousState", [ "$rootScope", "$state", a ]);
}(), function() {
    "use strict";
    var a = function(a) {
        var b = {
            request: function(b) {
                return b.headers = b.headers || {}, a.token && (b.headers.Authorization = "Token " + a.token), 
                b;
            }
        };
        return b;
    };
    angular.module("ygVendorApp").factory("tokenInjector", [ "$localStorage", a ]).config([ "$httpProvider", function(a) {
        a.interceptors.push("tokenInjector");
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        var d = {}, e = function() {
            var f = a.defer();
            return c.profile(function(a) {
                d.hasOwnProperty("role") && delete d.role, d.hasOwnProperty("name") && delete d.name, 
                d.hasOwnProperty("is_authenticated") && delete d.is_authenticated, f.resolve(angular.extend(d, a, {
                    $refresh: e,
                    $getUsername: function() {
                        return d.name;
                    },
                    $getUserRole: function() {
                        return d.role;
                    },
                    $clearUserRole: function() {
                        return b.$resetUserRole();
                    },
                    $hasRole: function(a) {
                        return d.role === a;
                    },
                    $hasAnyRole: function(a) {
                        return a.indexOf(d.role) >= 0;
                    },
                    $isAuthenticated: function() {
                        return d.is_authenticated;
                    },
                    $isAnonymous: function() {
                        return !d.is_authenticated;
                    }
                }));
            }, function(a) {
                d = {}, f.resolve(angular.extend(d, {
                    $refresh: e,
                    $clearUserRole: function() {
                        return b.$resetUserRole();
                    },
                    $hasRole: function(a) {
                        return d.role == a;
                    },
                    $hasAnyRole: function(a) {
                        return a.indexOf(d.role) >= 0;
                    },
                    $isAuthenticated: function() {
                        return d.is_authenticated;
                    },
                    $isAnonymous: function() {
                        return !d.is_authenticated;
                    }
                }));
            }), f.promise;
        };
        return e();
    };
    angular.module("ygVendorApp").factory("UserProfile", [ "$q", "role", "Profile", a ]);
}(), function() {
    "use strice";
    var a = function(a, b) {
        var c = {
            userrole: "anonymous",
            authenticated: !1,
            $resetUserRole: function() {
                return b.$reset(), userrole = "anonymous", authenticated = !1, {
                    userrole: userrole,
                    is_authenticated: authenticated
                };
            },
            $setUserRole: function(a) {
                a ? (userrole = a, authenticated = !0) : (userrole = "anonymous", authenticated = !1);
            },
            $getUserRole: function() {
                return {
                    userrole: userrole,
                    is_authenticated: authenticated
                };
            }
        };
        return c;
    };
    angular.module("ygVendorApp").factory("role", [ "$base64", "$localStorage", a ]);
}(), function() {
    "use strict";
    var a = function() {
        // Runs during compile
        return {
            // name: '',
            // priority: 1,
            // terminal: true,
            // controller: function($scope, $element, $attrs, $transclude) {},
            // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
            // template: '',
            // templateUrl: '',
            // replace: true,
            // transclude: true,
            // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
            scope: {
                workbookData: "="
            },
            // {} = isolate, true = child, false/undefined = no change
            restrict: "AE",
            // E = Element, A = Attribute, C = Class, M = Comment
            link: function(a, b, c, d) {
                // alasql.fn.toUpperCasse = function(name){
                // 	name = name.toUpperCasse();
                // 	name = name.replace(/[^a-zA-Z0-9]/g,' ');
                // };
                var e = function() {
                    alasql('SELECT * INTO XLSX("orders.xlsx",{headers:true}) FROM ?', [ a.workbookData ]);
                };
                b.bind("click", e);
            }
        };
    };
    angular.module("ygVendorApp").directive("ydExcelDownload", a);
}(), function() {
    "use strict";
    angular.module("ygVendorApp").directive("ydPagination", [ function() {
        // Runs during compile
        return {
            // name: '',
            // priority: 1,
            // terminal: true,
            // template: '',
            // templateUrl: '',
            // replace: true,
            // transclude: true,
            // compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
            // controller: function($scope, $element, $attrs, $transclude) {},
            // require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
            /*
				scope {
					@total      : total data count to show as total data.
					@totalPage  : total number of pages the present.
					@params     : all the params that needs to be sent, like page, date etc. it should be a object with madatory page property.
					@listLength : total count of current data list.
					@paginate   : object which contains two function to paginate to next and previous page.
					@pending    : optional! number of pending data which aren't executed yet.
					@unassigned : optional! number of unassigned data which aren't assagined yet.
					@getData    : a function of parent controller to reload the data as params changes. 
				}
			*/
            scope: {
                total: "@",
                totalPage: "@",
                params: "=",
                listLength: "@",
                paginate: "=",
                pending: "@?",
                unassigned: "@?",
                getData: "&"
            },
            // {} = isolate, true = child, false/undefined = no change
            restrict: "AE",
            // E = Element, A = Attribute, C = Class, M = Comment
            link: function(a, b, c, d) {
                a.orderFrom = 50 * (a.params.page - 1) + 1, a.orderTo = a.orderFrom - 1 + parseInt(a.listLength), 
                a.pageRange = function() {
                    return new Array(parseInt(a.totalPage));
                };
            },
            template: [ '<div class="ydPagination" layout="row" layout-align="start center">', '<div class="stats" layout="row">', '<p ng-if="pending"> <span class="pending-text">Pending: </span><span class="pending">{{pending}}</span> </p>', '<p ng-if="unassigned"><span class="unassigned-text">Unassigned: </span><span class="unassigned">{{unassigned}}</span> </p>', "<p>Total: {{total}} </p>", "</div>", "<span flex></span>", '<div class="pagination" layout="row" layout-align="start center">', "<p>Page:</p>", '<md-input-container class="md-accent">', // '<label class="hide-gt-xs">Page</label>',
            '<md-select class="md-warn" ng-model="params.page" ng-change="getData()" aria-label="page select">', '<md-option class="md-accent" ng-repeat="page in pageRange() track by $index" value="{{$index + 1}}">{{$index + 1}}</md-option>', "</md-select>", "</md-input-container>", "</div>", '<div class="pagination hide-xs" layout="row" layout-align="start center">', "<p>{{orderFrom}} -- {{orderTo}} of {{total}}</p>", "</div>", '<div class="page-navigation">', '<md-button ng-disabled="params.page == 1" ng-click="paginate.previouspage();" class="md-icon-button md-primary" aria-label="Menu Icon">', "<md-icon>arrow_backward</md-icon>", "</md-button>", '<md-button ng-disabled="params.page == totalPage" ng-click="paginate.nextpage();" class="md-icon-button md-primary" aria-label="Menu Icon">', "<md-icon>arrow_forward</md-icon>", "</md-button>", "</div>", "</div>" ].join("")
        };
    } ]);
}(), function() {
    "use strict";
    var a = function(a) {
        console.log("vendor");
    };
    angular.module("order", []).config([ "$stateProvider", function(a) {
        a.state("home.opsorder", {
            url: "^/all-orders?date&vendor_id&dg_username&order_status&page&start_time&end_time&is_cod&search&delivery_ids&pincodes&is_retail",
            templateUrl: "/static/modules/order/list/list.html",
            controllerAs: "opsOrder",
            controller: "opsOrderCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER ];
                    return a.hasAnyRole(c);
                } ],
                orders: [ "Order", "$stateParams", function(a, b) {
                    return b.date = void 0 !== b.date ? new Date(b.date).toISOString() : new Date().toISOString(), 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), b.is_cod = "true" == b.is_cod ? Boolean(b.is_cod) : null, 
                    b.is_retail = "true" == b.is_retail ? Boolean(b.is_retail) : null, Array.isArray(b.order_status) && (b.order_status = b.order_status.length > 0 ? b.order_status.toString() : null), 
                    Array.isArray(b.pincodes) && (b.pincodes = b.pincodes.length > 0 ? b.pincodes.toString() : null), 
                    a.getOrders.query(b).$promise;
                } ],
                Pincodes: [ "DeliveryGuy", function(a) {
                    return a.dgServicablePincodes.query().$promise;
                } ]
            }
        }).state("home.order", {
            url: "^/orders",
            templateUrl: "/static/modules/order/vendorOrders.html",
            controllerAs: "order",
            controller: "vendorOrderCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    return a.hasRole(b.userRole.VENDOR);
                } ]
            }
        });
    } ]).controller("vendorOrderCntrl", [ "$state", a ]);
}(), function() {
    "use strict";
    /*
		@AssignDgCntrl controller function for the assign delivery guy dialog
	*/
    function a(a, b) {
        var c = this;
        this.assignment_data = {
            pickup: {
                dg_id: null,
                assignment_type: "pickup"
            },
            delivery: {
                dg_id: null,
                assignment_type: "delivery"
            }
        }, this.cancel = function() {
            a.cancel();
        }, this.answer = function(b) {
            a.hide(b);
        }, this.dgSearchTextChange = function(a) {
            var c = {
                search: a
            };
            return b.dgPageQuery.query(c).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.pickupDgChange = function(a) {
            a ? c.assignment_data.pickup.dg_id = a.id : c.assignment_data.pickup.dg_id = void 0;
        }, this.deliveryDgChange = function(a) {
            a ? c.assignment_data.delivery.dg_id = a.id : c.assignment_data.delivery.dg_id = void 0;
        };
    }
    var b = function(b, c, d) {
        return {
            openDgDialog: function() {
                var d = b("sm") || b("xs");
                return c.show({
                    controller: [ "$mdDialog", "DeliveryGuy", a ],
                    controllerAs: "assignDG",
                    templateUrl: "/static/modules/order/dialogs/assign-dg.html?nd=" + Date.now(),
                    parent: angular.element(document.body),
                    clickOutsideToClose: !1,
                    fullscreen: d,
                    openFrom: "#options",
                    closeTo: "#options"
                });
            }
        };
    };
    angular.module("order").factory("orderDgAssign", [ "$mdMedia", "$mdDialog", "DeliveryGuy", b ]);
}(), function() {
    "use strict";
    var a = function() {
        return a;
    };
    angular.module("order").factory("orderFilter", [ a ]);
}(), function() {
    "use strict";
    var a = function() {
        var a = {
            selectedItemArray: [],
            toggle: function(b) {
                var c = a.selectedItemArray.indexOf(b);
                c > -1 ? a.selectedItemArray.splice(c, 1) : a.selectedItemArray.push(b);
            },
            exists: function(b) {
                return a.selectedItemArray.indexOf(b) > -1;
            },
            addItem: function(b) {
                b.selected = !0, a.selectedItemArray.push(b);
            },
            removeItem: function(b) {
                var c = selectedItemArray.indexOf(b);
                return c > -1 ? (b.selected = !1, a.selectedItemArray.splice(c, 1), !0) : !1;
            },
            isSelected: function() {
                return a.selectedItemArray.length > 0;
            },
            clearAll: function() {
                return a.selectedItemArray = [], a.selectedItemArray;
            },
            slectedItemLength: function() {
                return a.selectedItemArray.length;
            },
            getAllItemsIds: function() {
                var b = [];
                return a.selectedItemArray.forEach(function(a) {
                    b.push(a.id);
                }), b;
            }
        };
        return a;
    };
    angular.module("order").factory("orderSelection", [ a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
        /*
			 Variable definations for the route(Url)
		*/
        var o = this;
        this.params = e, this.params.order_status = e.order_status ? e.order_status.split(",") : [], 
        this.params.pincodes = e.pincodes ? e.pincodes.split(",") : [], this.params.date = new Date(this.params.date), 
        this.searchedDg = this.params.dg_username, this.searchVendor = this.params.vendor_id, 
        /*
			 scope Orders variable assignments are done from this section for the controller
		*/
        this.orders = i.payload.data.data, this.orderFrom = 50 * (this.params.page - 1) + 1, 
        this.orderTo = this.orderFrom - 1 + i.payload.data.data.length, this.total_pages = i.payload.data.total_pages, 
        this.total_orders = i.payload.data.total_orders, this.pending_orders_count = i.payload.data.pending_orders_count, 
        this.unassigned_orders_count = i.payload.data.unassigned_orders_count, this.pincodes = l.payload.data, 
        /*
			@ status_list: scope order status for eg: 'INTRANSIT' ,'DELIVERED' variable assignments.
			@ time_list: scope order time for time filer variable assignments.
		*/
        this.status_list = j.status, this.time_list = j.time, /*
			@ All method defination for the controller starts from here on.
		*/
        /*
			 @ toggleFilter : main sidenav toggle function, this function toggle the sidebar of the filets of the orders page page.
		*/
        this.toggleFilter = function() {
            b("order-filter").toggle();
        }, /*
			@pagerange: funxtion for total pages generations for pagination
		*/
        this.pageRange = function(a) {
            return new Array(a);
        }, /*
			@paginate is a function to paginate to the next and previous page of the order list
			@statusSelection is a fucntion to select or unselect the status data in order filter
			@pincodesSelection is a function select unselect multiple pincode in order filter
		*/
        this.paginate = {
            nextpage: function() {
                o.params.page = o.params.page + 1, o.getOrders();
            },
            previouspage: function() {
                o.params.page = o.params.page - 1, o.getOrders();
            }
        }, this.statusSelection = {
            toggle: function(a, b) {
                var c = b.indexOf(a.value);
                c > -1 ? b.splice(c, 1) : b.push(a.value);
            },
            exists: function(a, b) {
                return b.indexOf(a.value) > -1;
            }
        }, this.pincodesSelection = {
            toggle: function(a, b) {
                var c = b.indexOf(a.pincode);
                c > -1 ? b.splice(c, 1) : b.push(a.pincode);
            },
            exists: function(a, b) {
                return b.indexOf(a.pincode) > -1;
            }
        }, /*
			@dgSearchTextChange is a function for Delivery guy search for filter. When ever the filtered dg change, 
			this function is called.

			@selectedDgChange is a callback function after delivery guy selection in the filter.
		*/
        this.dgSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return f.dgPageQuery.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.selectedDgChange = function(a) {
            a ? o.params.dg_username = a.phone_number : o.params.dg_username = void 0;
        }, /*
			@dgSearchTextChange is a function for Delivery guy search for filter. When ever the filtered dg change, 
			this function is called.

			@selectedDgChange is a callback function after delivery guy selection in the filter.
		*/
        this.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return h.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.selectedVendorChange = function(a) {
            a ? o.params.vendor_id = a.id : o.params.vendor_id = void 0;
        }, /*
			@getOrders rleoads the order controller according too the filter to get the new filtered data.
		*/
        this.handleOrdeSelection = {
            selectActive: k.isSelected(),
            numberOfSelectedOrder: k.slectedItemLength(),
            update: function() {
                o.handleOrdeSelection.selectActive = k.isSelected(), o.handleOrdeSelection.numberOfSelectedOrder = k.slectedItemLength();
            },
            toggle: function(a) {
                k.toggle(a), o.handleOrdeSelection.update();
            },
            exists: function(a) {
                return k.exists(a);
            },
            clear: function() {
                k.clearAll(), o.handleOrdeSelection.update();
            }
        }, /*
			@assignDg is a function to open dg assignment dialog box and assign delivery guy and pickup guy for the 
			selected orders once user confirms things.
		*/
        o.assignDg = function() {
            n.openDgDialog().then(function(a) {
                a.pickup.delivery_ids = k.getAllItemsIds(), a.delivery.delivery_ids = k.getAllItemsIds(), 
                o.assignOrders(a);
            }, function() {
                o.status = "You cancelled the dialog.";
            });
        }, o.assignDgForSingleOrder = function(a) {
            n.openDgDialog().then(function(b) {
                b.pickup.delivery_ids = [ a.id ], b.delivery.delivery_ids = [ a.id ], o.assignOrders(b);
            }, function() {
                o.status = "You cancelled the dialog.";
            });
        }, /*
			@assignOrders is a function to call the order assign api from Order service and handle the response.
		*/
        o.assignOrders = function(a) {
            var b = [];
            a.pickup.dg_id && b.push(g.assignOrders.assign(a.pickup).$promise), a.delivery.dg_id && b.push(g.assignOrders.assign(a.delivery).$promise), 
            m.all(b).then(function(a) {
                k.clearAll(), o.getOrders();
            });
        }, /*
			@getOrders rleoads the order controller according too the filter to get the new filtered data.
		*/
        this.getOrders = function() {
            a.transitionTo(a.current, o.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("order").controller("opsOrderCntrl", [ "$state", "$mdSidenav", "$mdDialog", "$mdMedia", "$stateParams", "DeliveryGuy", "Order", "Vendor", "orders", "constants", "orderSelection", "Pincodes", "$q", "orderDgAssign", a ]);
}(), function() {
    "use strict";
    angular.module("deliveryguy", []).config([ "$stateProvider", function(a) {
        a.state("home.dgList", {
            url: "^/deliveryguy/list?date&attendance&search&page",
            templateUrl: "/static/modules/deliveryguy/list/list.html",
            controllerAs: "dgList",
            controller: "dgListCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                dgs: [ "DeliveryGuy", "$stateParams", function(a, b) {
                    return b.date = void 0 !== b.date ? new Date(b.date).toISOString() : new Date().toISOString(), 
                    b.attendance = void 0 !== b.attendance ? b.attendance : "ALL", b.page = isNaN(b.page) ? 1 : parseInt(b.page), 
                    a.dgPageQuery.query(b).$promise;
                } ]
            }
        }).state("home.dgCreate", {
            url: "^/deliveryguy/create",
            templateUrl: "/static/modules/deliveryguy/create/create.html",
            controllerAs: "dgCreate",
            controller: "dgCreateCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    return a.hasRole(b.userRole.HR);
                } ],
                leadUserList: [ "DeliveryGuy", "$q", function(a, b) {
                    return b.all({
                        TeamLead: a.dgTeamLeadQuery.query().$promise,
                        OpsManager: a.dgOpsManagerQuery.query().$promise
                    });
                } ]
            }
        }).state("home.dgDetail", {
            url: "^/deliveryguy/detail/:id",
            templateUrl: "/static/modules/deliveryguy/detail/detail.html",
            controllerAs: "dgDetail",
            controller: "dgDetailCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                DG: [ "DeliveryGuy", "$stateParams", function(a, b) {
                    new a.dg();
                    return a.dg.get(b).$promise;
                } ],
                leadUserList: [ "DeliveryGuy", "$q", function(a, b) {
                    return b.all({
                        TeamLead: a.dgTeamLeadQuery.query().$promise,
                        OpsManager: a.dgOpsManagerQuery.query().$promise
                    });
                } ]
            }
        });
    } ]);
}(), function() {
    "use strict";
    /*
		Constant for storing all the static value required for dgs.
		1. Dg shift timings
		2. Dg transportation mode
	*/
    var a = {
        shift_timings: [ {
            start_time: "06:00:00",
            end_time: "15:00:00"
        }, {
            start_time: "07:00:00",
            end_time: "16:00:00"
        }, {
            start_time: "09:00:00",
            end_time: "18:00:00"
        }, {
            start_time: "10:00:00",
            end_time: "19:00:00"
        }, {
            start_time: "10:30:00",
            end_time: "19:30:00"
        }, {
            start_time: "11:00:00",
            end_time: "20:00:00"
        }, {
            start_time: "13:00:00",
            end_time: "22:00:00"
        }, {
            start_time: "14:00:00",
            end_time: "23:00:00"
        } ],
        transportation_mode: [ {
            key: "Biker",
            value: "BIKER"
        }, {
            key: "Walker",
            value: "WALKER"
        }, {
            key: "Car Driver",
            value: "CAR_DRIVER"
        } ]
    };
    angular.module("deliveryguy").constant("dgConstants", a);
}(), function() {
    "use strict";
    /*
		filter to convert a time string to specific format for displaying it in dropdown. 
		For eg: 09:00:00 with beconverted to a format to 09:00 AM, 
		which can be shown in dropdowns or any place for ease of user.
	*/
    var a = function(a) {
        return function(a) {
            if (a) {
                var b = a.split(":");
                return moment().hour(b[0]).minute(b[1]).format("hh:mm A");
            }
            return !1;
        };
    };
    angular.module("deliveryguy").filter("timeAsDate", [ "$filter", a ]);
}(), function() {
    "use strict";
    /*
		dgListCntrl is the controller for the delivery guy list page. 
		Its resolved after loading all the dgs from the server.
			
	*/
    var a = function(a, b, c, d, e, f) {
        var g = this;
        this.params = c, this.params.date = new Date(this.params.date), this.dg_status = e.dg_status, 
        this.searchDgActive = void 0 !== this.params.search, /*
			@dgs: resolved dgs list accordign to the url prameters.
		*/
        this.dgs = d.payload.data.data, this.total_pages = d.payload.data.total_pages, this.total_dgs = d.payload.data.total_dg_count, 
        /*
			 @ toggleFilter : main sidenav toggle function, this function toggle the sidebar of the filets of the dg page page.
		*/
        this.toggleFilter = function() {
            b("dgList-filter").toggle();
        }, /*
			@paginate is a function to paginate to the next and previous page of the delivery guy list
		*/
        this.paginate = {
            nextpage: function() {
                g.params.page = g.params.page + 1, g.getDgs();
            },
            previouspage: function() {
                g.params.page = g.params.page - 1, g.getDgs();
            }
        }, /*
			@backFromSearch is a function to revert back from a searched delivery guy name to complete list view of delivery guys
		*/
        this.backFromSearch = function() {
            g.params.search = void 0, g.searchDgActive = !1, g.getDgs();
        }, this.downloadAttendance = function() {
            var a = {
                start_date: moment(g.params.date).format(),
                end_date: moment(g.params.date).format()
            };
            f.dgsAttendance.query(a, function(a) {
                alasql.fn.IsoToDate = function(a) {
                    return moment(a).format("DD-MM-YYYY");
                };
                var b = "SELECT name AS Name,IsoToDate(attendance -> 0 -> date) AS Date,attendance -> 0 -> worked_hrs AS Hours";
                alasql(b + ' INTO XLSX("attendance.xlsx",{headers:true}) FROM ?', [ a.payload.data ]);
            });
        }, /*
			@getOrders rleoads the order controller according too the filter to get the new filtered data.
		*/
        this.getDgs = function() {
            a.transitionTo(a.current, g.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("deliveryguy").controller("dgListCntrl", [ "$state", "$mdSidenav", "$stateParams", "dgs", "constants", "DeliveryGuy", a ]);
}(), function() {
    "use strict";
    /*
		dgCreateCntrl is the controller for the delivery guy create page. 
		Its resolved only after loading all the operation manager and team leads.
			
	*/
    var a = function(a, b, c, d, e, f) {
        var g = this;
        /*
			@shift_timings,@transportation_mode : 
			is the list of all the available shift timings and transportation modes for creating dg,
			this is currently static as constant data in constants/constants.js
		*/
        g.shift_timings = c.shift_timings, g.transportation_mode = c.transportation_mode, 
        /*
			@OpsManagers: resolved operation manager list.
			@TeamLeads  : resolved team leads list.
		*/
        g.OpsManagers = e.OpsManager.payload.data, g.TeamLeads = e.TeamLead.payload.data, 
        /*
			@dg: is a instance of delliveryguy.dg resource for saving the dg data a with ease
		*/
        g.dg = new d.dg(), /*
			function to redirect back to the previous page or parent page.
		*/
        g.goBack = function() {
            f.isAvailable() ? f.redirectToPrevious() : a.go("home.dgList");
        }, /*
			create : A function for creation delivery guys and using angular resource.
			It redirects to list view on succesfull creation of dg or handle's error on creation.
		*/
        g.create = function() {
            g.dg.shift_timing = angular.fromJson(g.dg.shift_timing), g.dg.$save(function() {
                g.goBack();
            });
        };
    };
    angular.module("deliveryguy").controller("dgCreateCntrl", [ "$state", "$mdSidenav", "dgConstants", "DeliveryGuy", "leadUserList", "PreviousState", a ]);
}(), function() {
    "use strict";
    function a(a, b, c, d, e) {
        var f = this;
        f.DG = c, f.DG.team_lead_dg_ids = [], f.DG.ops_manager_ids = [], f.DG.team_leads.forEach(function(a) {
            a.dg_id && f.DG.team_lead_dg_ids.push(a.dg_id);
        }), f.DG.ops_managers.forEach(function(a) {
            f.DG.ops_manager_ids.push(a.employee_id);
        }), f.OpsManagers = d, f.TeamLeads = e, f.shift_timings = b.shift_timings, f.transportation_mode = b.transportation_mode, 
        f.cancel = function() {
            a.cancel();
        }, f.answer = function(b) {
            a.hide(b);
        };
    }
    function b(a, b, c) {
        var d = this;
        d.DG = b, d.selectedTeamMembers = [], d.selectedPincodes = [], d.teamLeadData = {
            id: b.id,
            pincodes: [],
            associate_dgs: []
        }, d.cancel = function() {
            a.cancel();
        }, c.dgServicablePincodes.query().$promise.then(function(a) {
            d.pincodes = a.payload.data;
        }), d.addTeamDgs = function(a) {
            d.teamLeadData.associate_dgs.push(a.id);
        }, d.removeTeamDgs = function(a) {
            var b = d.teamLeadData.associate_dgs.indexOf(a.id);
            d.teamLeadData.associate_dgs.splice(b, 1);
        }, d.addTlPincode = function(a) {
            d.teamLeadData.pincodes.push(a.pincode);
        }, d.removeTlPincode = function(a) {
            var b = d.teamLeadData.pincodes.indexOf(a.pincode);
            d.teamLeadData.pincodes.splice(b, 1);
        }, d.dgSearch = function(a) {
            var b = {
                search: a
            };
            return c.dgPageQuery.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, d.transformChip = function(a) {
            // If it is an object, it's already a known chip
            // If it is an object, it's already a known chip
            return angular.isObject(a) ? {
                name: a.name,
                phone_number: a.phone_number,
                id: a.id
            } : void 0;
        }, d.transformPinChip = function(a) {
            // If it is an object, it's already a known chip
            // If it is an object, it's already a known chip
            return angular.isObject(a) ? a : void 0;
        }, d.submitTlData = function() {
            a.hide(d.teamLeadData);
        };
    }
    var c = function(c, d, e, f, g, h, i, j, k) {
        var l = this;
        l.params = d, l.DG = j.payload.data, l.attendance_date = moment().date(1).toDate(), 
        l.attendanceMinDate = moment("2015-01-01").toDate(), l.attendanceMaxDate = moment().toDate(), 
        l.OpsManagers = i.OpsManager.payload.data, l.TeamLeads = i.TeamLead.payload.data, 
        l.showEditDialog = function() {
            var b = f("sm") || f("xs");
            e.show({
                controller: [ "$mdDialog", "dgConstants", "DG", "OpsManagers", "TeamLeads", a ],
                controllerAs: "dgEdit",
                templateUrl: "/static/modules/deliveryguy/dialogs/edit.html",
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                fullscreen: b,
                openFrom: "#dgEditDialog",
                closeTo: "#dgEditDialog",
                locals: {
                    DG: l.DG,
                    OpsManagers: l.OpsManagers,
                    TeamLeads: l.TeamLeads
                }
            }).then(function(a) {
                a.shift_time = angular.fromJson(a.shift_time), g.dg.$update(a, function(a) {
                    l.getDgDetails();
                });
            }, function() {
                l.status = "You cancelled the dialog.";
            });
        }, /*
			function to redirect back to the previous page or parent page.
		*/
        l.goBack = function() {
            k.isAvailable() ? k.redirectToPrevious() : c.go("home.dgList");
        }, l.onlyMonthsPredicate = function(a) {
            var b = moment(a).date();
            return 1 === b;
        }, l.getTeamMembers = function() {
            g.dg.associated_dgs({
                id: l.DG.id
            }, function(a) {
                l.associated_dg_list = a.payload.data;
            });
        }, l.toTeamlead = function() {
            e.show({
                controller: [ "$mdDialog", "DG", "DeliveryGuy", b ],
                controllerAs: "dgTeamLead",
                templateUrl: "/static/modules/deliveryguy/dialogs/teamlead.html",
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                fullscreen: !0,
                locals: {
                    DG: l.DG
                }
            }).then(function(a) {
                l.DG.is_teamlead ? g.dg.$update(a, function(a) {
                    l.getDgDetails();
                }) : g.dg.promoteToTL(a, function(a) {
                    l.getDgDetails();
                });
            }, function() {
                l.status = "You cancelled the dialog.";
            });
        }, l.getAttendance = function() {
            var a = {
                id: l.DG.id,
                month: moment(l.attendance_date).month() + 1,
                year: moment(l.attendance_date).year()
            };
            g.dg.attendance(a, function(a) {
                l.dg_monthly_attendance = a.payload.data.attendance;
            });
        }, l.getDgDetails = function() {
            c.transitionTo(c.current, l.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("deliveryguy").controller("dgDetailCntrl", [ "$state", "$stateParams", "$mdDialog", "$mdMedia", "DeliveryGuy", "dgConstants", "leadUserList", "DG", "PreviousState", c ]);
}(), function() {
    "use strict";
    angular.module("vendor", []).config([ "$stateProvider", function(a) {
        a.state("home.vendorList", {
            url: "^/vendor/list?date&search&page",
            templateUrl: "/static/modules/vendor/list/list.html",
            controllerAs: "vendorList",
            controller: "vendorListCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.ACCOUNTS, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                vendors: [ "Vendor", "$stateParams", function(a, b) {
                    return b.date = void 0 !== b.date ? new Date(b.date).toISOString() : new Date().toISOString(), 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.query(b).$promise;
                } ]
            }
        });
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d) {
        var e = this;
        e.params = c, this.searchVendorActive = void 0 !== this.params.search, /*
			@vendors: resolved vendors list accordign to the url prameters.
		*/
        e.vendors = d.payload.data.data, e.total_pages = d.payload.data.total_pages, e.total_vendors = d.payload.data.total_vendor_count, 
        /*
			@paginate is a function to paginate to the next and previous page of the delivery guy list
		*/
        e.paginate = {
            nextpage: function() {
                e.params.page = e.params.page + 1, e.getVendors();
            },
            previouspage: function() {
                e.params.page = e.params.page - 1, e.getVendors();
            }
        }, /*
			@backFromSearch is a function to revert back from a searched delivery guy name to complete list view of delivery guys
		*/
        e.backFromSearch = function() {
            e.params.search = void 0, e.searchVendorActive = !1, e.getVendors();
        }, /*
			@getOrders rleoads the order controller according too the filter to get the new filtered data.
		*/
        e.getVendors = function() {
            a.transitionTo(a.current, e.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("vendor").controller("vendorListCntrl", [ "$state", "$mdSidenav", "$stateParams", "vendors", a ]);
}();
//# sourceMappingURL=main.min.js.map