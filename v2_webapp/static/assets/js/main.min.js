/*! Vendor-Webaap - v0.0.0 - 2016-04-08 */
!function() {
    "use strict";
    var a = function(a, b, c, d, e) {
        this.loader = !1, this.userLogin = function() {
            this.loader = !0;
            var f = this, g = {
                username: this.username,
                password: this.password
            };
            b.login(g).then(function(b) {
                d.token = b.data.payload.data.auth_token, c.$refresh().then(function(b) {
                    b.role === e.userRole.OPS_MANAGER || b.role === e.userRole.OPS ? a.go("home.opsorder") : b.role === e.userRole.VENDOR ? a.go("home.order") : b.role === e.userRole.HR ? a.go("home.dgList") : b.role === e.userRole.ACCOUNTS && a.go("home.cod.deposit");
                });
            }, function(a) {
                f.loader = !1, f.error_message = a.data.error.message;
            });
        };
    };
    angular.module("login", []).config([ "$stateProvider", function(a) {
        a.state("login", {
            url: "/login",
            templateUrl: "/static/modules/login/login.html",
            controllerAs: "login",
            controller: "LoginCntrl",
            resolve: {
                UserProfile: "UserProfile",
                access: [ "Access", function(a) {
                    return a.isAnonymous();
                } ]
            }
        });
    } ]).controller("LoginCntrl", [ "$state", "AuthService", "UserProfile", "$localStorage", "constants", a ]);
}(), function() {
    "use strice";
    var a = function(a, b) {
        return {
            login: function(c) {
                return a.post(b.v3baseUrl + "login/", c);
            }
        };
    };
    angular.module("login").factory("AuthService", [ "$http", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g, h, i, j) {
        AWS.config.update({
            accessKeyId: g.ACCESS_KEY,
            secretAccessKey: g.SECRET_KEY
        });
        var k = this;
        this.tabs = g.permissible_tabs[h.$getUserRole()], this.user_name = h.$getUsername(), 
        alasql.fn.IsoToDate = function(a) {
            return moment(a).format("DD-MM-YYYY");
        };
        var l = d.confirm().parent(angular.element(document.querySelector("#body"))).clickOutsideToClose(!1).title("Are you sure you want to Sign Out?").textContent("After this you will be redirected to login page.").ariaLabel("Sign Out").targetEvent().ok("Sign Out!").cancel("Not Now").openFrom("#logout-button").closeTo("#logout-button");
        this.toggleSideNav = function() {
            c("left").toggle();
        }, this.logout = function() {
            h.$clearUserRole(), h.$refresh().then(function(a) {
                b.go("login");
            });
        }, this.showLogoutDialog = function() {
            d.show(l).then(function() {
                k.logout();
            }, function() {
                k.toggleSideNav();
            });
        }, this.getNoticeCount = function() {
            j.pendingNotificationCount.get(function(b) {
                void 0 !== k.count && k.count != b.payload.data && a.$broadcast("notificationUpdated"), 
                k.count = b.payload.data;
            });
        }, h.$getUserRole() !== g.userRole.OPS && h.$getUserRole() !== g.userRole.OPS_MANAGER || k.getNoticeCount(), 
        f(function() {
            h.$getUserRole() !== g.userRole.OPS && h.$getUserRole() !== g.userRole.OPS_MANAGER || k.getNoticeCount();
        }, 12e4), a.$on("errorOccured", function() {
            i.loaderComplete(), a.errorMessage && e.show({
                controller: "ErrorToastCntrl",
                controllerAs: "errorToast",
                templateUrl: "/static/modules/home/error-toast-template.html",
                hideDelay: 6e3,
                position: "top right"
            });
        }), a.$on("eventSuccess", function() {
            i.loaderComplete(), a.successMessage && e.show({
                controller: "SuccessToastCntrl",
                controllerAs: "successToast",
                templateUrl: "/static/modules/home/success-toast-template.html",
                hideDelay: 5e3,
                position: "top right"
            });
        });
    };
    angular.module("home", []).config([ "$stateProvider", function(a) {
        a.state("home", {
            url: "/home",
            templateUrl: "/static/modules/home/home.html",
            controllerAs: "home",
            controller: "homeCntrl",
            resolve: {
                access: [ "Access", function(a) {
                    return a.isAuthenticated();
                } ],
                UserProfile: "UserProfile"
            }
        });
    } ]).controller("homeCntrl", [ "$rootScope", "$state", "$mdSidenav", "$mdDialog", "$mdToast", "$interval", "constants", "UserProfile", "Notification", "Notice", a ]).controller("ErrorToastCntrl", [ "$mdToast", "$rootScope", function(a, b) {
        this.msg = b.errorMessage, this.closeToast = function() {
            a.hide();
        };
    } ]).controller("SuccessToastCntrl", [ "$mdToast", "$rootScope", function(a, b) {
        this.msg = b.successMessage, this.closeToast = function() {
            a.hide();
        };
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {};
    angular.module("forbidden", []).config([ "$stateProvider", function(a) {
        a.state("forbidden", {
            url: "/forbidden",
            templateUrl: "/static/modules/forbidden/forbidden.html",
            controllerAs: "forbidden",
            controller: "forbiddenCntrl"
        });
    } ]).controller("forbiddenCntrl", [ "$state", a ]);
}(), function() {
    "use strict";
    angular.module("ygVendorApp", [ "ngMaterial", "ngMessages", "ui.router", "ngStorage", "ngResource", "base64", "login", "home", "order", "deliveryguy", "vendor", "reports", "Cod", "feedback", "notification", "forbidden" ]).config([ "$urlRouterProvider", "$locationProvider", "$resourceProvider", "$mdThemingProvider", "roleProvider", function(a, b, c, d, e) {
        a.otherwise("/home"), b.html5Mode(!0).hashPrefix("!"), c.defaults.stripTrailingSlashes = !1, 
        e.$get().$setUserRole(), d.definePalette("ygBlue", {
            "50": "EEFDFD",
            "100": "E9F5F5",
            "200": "C8EEF8",
            "300": "89DAF1",
            "400": "6DD2ED",
            "500": "52C9EA",
            "600": "37C0E7",
            "700": "1CB8E3",
            "800": "18A2CB",
            "900": "158CAD",
            A100: "C4EEF9",
            A200: "78D7EF",
            A400: "1FC0E7",
            A700: "31AEF7",
            contrastDefaultColor: "light",
            contrastDarkColors: [ "50", "100", "200", "300", "400", "A100" ],
            contrastLightColors: void 0
        }), d.definePalette("ygOrange", {
            "50": "FFF9F1",
            "100": "FF7CEC",
            "200": "FFEED6",
            "300": "FDD9A6",
            "400": "FDCD88",
            "500": "FCC06A",
            "600": "FBB34C",
            "700": "FBA72E",
            "800": "FA9A10",
            "900": "E78A05",
            A100: "FFF6CF",
            A200: "FFF0C7",
            A400: "FDD393",
            A700: "FBB134",
            contrastDefaultColor: "dark",
            contrastDarkColors: [ "50", "100", "200", "300", "400", "A100" ],
            contrastLightColors: void 0
        }), d.theme("ygBlueTheme").primaryPalette("ygBlue", {
            "default": "700",
            "hue-1": "100",
            "hue-2": "600",
            "hue-3": "A100"
        }).accentPalette("ygOrange", {
            "default": "500"
        }).warnPalette("red"), d.setDefaultTheme("ygBlueTheme");
    } ]);
}(), function() {
    "use strice";
    var a = {
        role: "",
        token: ""
    };
    angular.module("ygVendorApp").constant("UserData", a);
}(), function() {
    "use strict";
    var a = {
        operations: {
            order: !0,
            createOrder: !1,
            assignOrder: !0,
            updateOrder: !0,
            dg: !0,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        },
        vendor: {
            order: !0,
            createOrder: !0,
            assignOrder: !1,
            updateOrder: !1,
            dg: !1,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !1,
            reports: !0,
            COD: !1,
            customer: !0,
            products: !0,
            feedback: !0,
            tutorial: !0,
            notification: !1
        },
        hr: {
            order: !1,
            createOrder: !1,
            assignOrder: !1,
            updateOrder: !1,
            dg: !0,
            dgEdit: !0,
            dgCreate: !0,
            dgPromteTeamLead: !0,
            vendor: !1,
            reports: !1,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !1,
            tutorial: !1,
            notification: !1
        },
        operations_manager: {
            order: !0,
            createOrder: !1,
            assignOrder: !0,
            updateOrder: !0,
            dg: !0,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        },
        accounts: {
            order: !1,
            createOrder: !1,
            assignOrder: !1,
            updateOrder: !1,
            dg: !1,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !1,
            reports: !1,
            COD: !0,
            customer: !1,
            products: !1,
            feedback: !1,
            tutorial: !1,
            notification: !1
        },
        sales: {
            order: !0,
            createOrder: !1,
            assignOrder: !1,
            updateOrder: !1,
            dg: !0,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !1
        },
        sales_manager: {
            order: !0,
            createOrder: !1,
            assignOrder: !1,
            updateOrder: !1,
            dg: !0,
            dgEdit: !1,
            dgCreate: !1,
            dgPromteTeamLead: !1,
            vendor: !0,
            reports: !0,
            COD: !1,
            customer: !1,
            products: !1,
            feedback: !0,
            tutorial: !1,
            notification: !0
        }
    }, b = [ {
        status: "Intransit",
        value: "INTRANSIT"
    }, {
        status: "Queued",
        value: "QUEUED",
        selected: !1
    }, {
        status: "Delivered",
        value: "DELIVERED",
        selected: !1
    }, {
        status: "Order Placed",
        value: "ORDER_PLACED",
        selected: !1
    }, {
        status: "Pickup Attempted",
        value: "PICKUPATTEMPTED",
        selected: !1
    }, {
        status: "Deliver Attempted",
        value: "DELIVERYATTEMPTED",
        selected: !1
    }, {
        status: "Cancelled",
        value: "CANCELLED",
        selected: !1
    }, {
        status: "Rejected",
        value: "REJECTED",
        selected: !1
    } ], c = [ {
        status: "All",
        value: "ALL"
    }, {
        status: "Checked-In",
        value: "ONLY_CHECKEDIN"
    }, {
        status: "Not Checked-In",
        value: "NOT_CHECKEDIN"
    }, {
        status: "CheckedIn & CheckedOut",
        value: "CHECKEDIN_AND_CHECKEDOUT"
    } ], d = [ {
        value: "00 AM - 06 AM ",
        time: {
            start_time: 1,
            end_time: 6
        }
    }, {
        value: "06 AM - 12 PM",
        time: {
            start_time: 6,
            end_time: 12
        }
    }, {
        value: "12 PM - 06 PM",
        time: {
            start_time: 12,
            end_time: 18
        }
    }, {
        value: "06 PM - 12 AM",
        time: {
            start_time: 18,
            end_time: 23
        }
    } ], e = {
        v1baseUrl: "/api/v1/",
        v2baseUrl: "/api/v2/",
        v3baseUrl: "/api/v3/",
        userRole: {
            OPS: "operations",
            VENDOR: "vendor",
            HR: "hr",
            OPS_MANAGER: "operations_manager",
            ACCOUNTS: "accounts",
            SALES: "sales",
            SALES_MANAGER: "sales_manager"
        },
        status: b,
        time: d,
        dg_status: c,
        permissible_tabs: a,
        ACCESS_KEY: "AKIAJTRSKA2PKKWFL5PA",
        SECRET_KEY: "grJpBB1CcH8ShN6g88acAkDjvklYdgX7OENAx4g/",
        S3_BUCKET: "yourguy-pod"
    };
    angular.module("ygVendorApp").constant("constants", e);
}(), function() {
    "use strict";
    var a = function(a, b) {
        var c = {
            OK: 200,
            UNAUTHORIZED: 401,
            FORBIDDEN: 403,
            hasRole: function(d) {
                var e = a.defer();
                return b.then(function(a) {
                    a.$hasRole(d) ? e.resolve(c.OK) : a.$isAnonymous() ? e.reject(c.UNAUTHORIZED) : e.reject(c.FORBIDDEN);
                }), e.promise;
            },
            hasAnyRole: function(d) {
                var e = a.defer();
                return b.then(function(a) {
                    a.$hasAnyRole(d) ? e.resolve(c.OK) : a.$isAnonymous() ? e.reject(c.UNAUTHORIZED) : e.reject(c.FORBIDDEN);
                }), e.promise;
            },
            isAuthenticated: function() {
                var d = a.defer();
                return b.then(function(a) {
                    a.$isAuthenticated() ? d.resolve(c.Ok) : d.reject(c.UNAUTHORIZED);
                }), d.promise;
            },
            isAnonymous: function() {
                var d = a.defer();
                return b.then(function(a) {
                    a.$isAnonymous() ? d.resolve(c.OK) : d.reject(c.FORBIDDEN);
                }), d.promise;
            }
        };
        return c;
    };
    angular.module("ygVendorApp").factory("Access", [ "$q", "UserProfile", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getDeposits: a(b.v3baseUrl + "cod/bank_deposits_list/"),
            verifyDeposits: a(b.v3baseUrl + "cod/verify_bank_deposit/", {}, {
                update: {
                    method: "PUT"
                }
            }),
            getVerifiedDeposits: a(b.v3baseUrl + "cod/verified_bank_deposits_list/"),
            tranferToClient: a(b.v3baseUrl + "cod/transfer_to_client/", {}, {
                send: {
                    method: "POST"
                }
            }),
            transactionHistory: a(b.v3baseUrl + "cod/vendor_transaction_history/")
        };
    };
    angular.module("ygVendorApp").factory("COD", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            dg: a(b.v3baseUrl + "deliveryguy/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !0
                },
                $update: {
                    url: b.v3baseUrl + "deliveryguy/:id/edit_dg_details/",
                    method: "PUT"
                },
                attendance: {
                    url: b.v3baseUrl + "deliveryguy/:id/attendance/",
                    method: "PUT"
                },
                associated_dgs: {
                    url: b.v3baseUrl + "deliveryguy/:id/tl_associated_dgs/",
                    method: "GET"
                },
                promoteToTL: {
                    url: b.v3baseUrl + "deliveryguy/:id/promote_to_teamlead/",
                    method: "PUT"
                },
                deactivate: {
                    url: b.v3baseUrl + "deliveryguy/:id/deactivate/",
                    method: "PUT"
                }
            }),
            dgPageQuery: a(b.v3baseUrl + "deliveryguy/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgTeamLeadQuery: a(b.v3baseUrl + "deliveryguy/teamleads/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgOpsManagerQuery: a(b.v3baseUrl + "deliveryguy/ops_executives/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            dgServicablePincodes: a(b.v3baseUrl + "servicible_pincodes/", {}, {
                query: {
                    method: "GET",
                    isArray: !1,
                    cache: !0
                }
            }),
            dgsAttendance: a(b.v3baseUrl + "deliveryguy/download_attendance/", {}, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("DeliveryGuy", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getGroups: a(b.v3baseUrl + "freshdesk/groups/", {}, {
                query: {
                    method: "GET",
                    cache: !0
                }
            }),
            getTicketsById: a(b.v3baseUrl + "freshdesk/get_ticket/"),
            getTickets: a(b.v3baseUrl + "freshdesk/all_tickets/", {}, {
                query: {
                    method: "GET"
                }
            }),
            addNotes: a(b.v3baseUrl + "freshdesk/add_note/", {}, {
                update: {
                    method: "POST"
                }
            }),
            resolve: a(b.v3baseUrl + "freshdesk/resolve/", {}, {
                update: {
                    method: "PUT"
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("Feedback", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getNotifications: a(b.v3baseUrl + "notification/", {}, {
                query: {
                    method: "GET"
                }
            }),
            pendingNotificationCount: a(b.v3baseUrl + "notification/pending/"),
            markAsRead: a(b.v3baseUrl + "notification/:id/read/", {
                id: "@id"
            }, {
                update: {
                    method: "POST"
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("Notice", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        return {
            loaderStart: function() {
                angular.element(c[0].getElementsByClassName("request-loader")).removeClass("request-loader-hidden");
            },
            loaderComplete: function() {
                angular.element(c[0].getElementsByClassName("request-loader")).addClass("request-loader-hidden");
            },
            showError: function(b) {
                a.errorMessage = b, a.$broadcast("errorOccured");
            },
            showSuccess: function(b) {
                a.successMessage = b, a.$broadcast("eventSuccess");
            }
        };
    };
    angular.module("ygVendorApp").factory("Notification", [ "$rootScope", "$state", "$document", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getOrders: a(b.v3baseUrl + "order/:id/", {
                id: "@id"
            }, {
                query: {
                    method: "GET",
                    isArray: !1
                }
            }),
            assignOrders: a(b.v3baseUrl + "order/assign_orders/", {}, {
                assign: {
                    method: "PUT"
                }
            }),
            updatePickup: a(b.v3baseUrl + "order/:id/picked_up/", {
                id: "@id"
            }, {
                update: {
                    method: "PUT"
                }
            }),
            updateDelivered: a(b.v3baseUrl + "order/:id/delivered/", {
                id: "@id"
            }, {
                update: {
                    method: "PUT"
                }
            }),
            updatePickupAttempted: a(b.v3baseUrl + "order/:id/pickup_attempted/", {
                id: "@id"
            }, {
                update: {
                    method: "PUT"
                }
            }),
            updateDeliveryAttempted: a(b.v3baseUrl + "order/:id/delivery_attempted/", {
                id: "@id"
            }, {
                update: {
                    method: "PUT"
                }
            }),
            editCODAmount: a(b.v3baseUrl + "order/:id/update_cod/", {
                id: "@id"
            }, {
                update: {
                    method: "PUT"
                }
            })
        };
    };
    angular.module("ygVendorApp").factory("Order", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return a(b.v3baseUrl + "profile/", {}, {
            profile: {
                method: "GET",
                transformResponse: function(a, b) {
                    var c = angular.fromJson(a);
                    return c.payload ? (c.payload.data.is_authenticated = c.success, c.payload.data) : c;
                }
            }
        });
    };
    angular.module("ygVendorApp").factory("Profile", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            getReport: a(b.v3baseUrl + "dashboard_stats/", {}, {
                stats: {
                    method: "GET"
                }
            }),
            reportsExcel: a(b.v3baseUrl + "excel_download/")
        };
    };
    angular.module("ygVendorApp").factory("Reports", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return a(b.v3baseUrl + "vendor/:id/", {
            id: "@id"
        }, {
            profile: {
                method: "GET"
            },
            query: {
                method: "GET",
                isArray: !1
            }
        });
    };
    angular.module("ygVendorApp").factory("Vendor", [ "$resource", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d) {
        var e = {
            responseError: function(e) {
                e.data.error && (d.errorMessage = e.data.error.message);
                var f = a.defer();
                return 401 === e.status || 403 === e.status ? (b.$reset(), c.path("/login")) : 500 === e.status && (d.errorMessage = "Something Went Wrong"), 
                d.$broadcast("errorOccured"), f.reject(e), f.promise;
            }
        };
        return e;
    }, b = function(a, b, c, d, e) {
        a.$on("$stateChangeError", function(a, e, f, g, h, i) {
            console.log(i), angular.element(d[0].getElementsByClassName("request-loader")).addClass("request-loader-hidden"), 
            i == b.UNAUTHORIZED ? c.go("login") : i == b.FORBIDDEN && c.go("forbidden");
        }), a.$on("$stateChangeStart", function(a, f, g, h, i) {
            angular.element(d[0].getElementsByClassName("request-loader")).removeClass("request-loader-hidden"), 
            f.redirectTo ? (a.preventDefault(), c.go(f.redirectTo, g)) : "home" === f.name && b.hasAnyRole([ e.userRole.OPS, e.userRole.OPS_MANAGER, e.userRole.SALES, e.userRole.SALES_MANAGER ]).then(function(a) {
                c.go("home.opsorder");
            }, function(a) {
                b.hasRole(e.userRole.HR).then(function(a) {
                    c.go("home.dgList");
                }, function(a) {
                    b.hasRole(e.userRole.ACCOUNTS).then(function(a) {
                        c.go("home.cod.deposit");
                    }, function(a) {
                        b.hasRole(e.userRole.VENDOR).then(function(a) {
                            c.go("forbidden");
                        }, function(a) {
                            c.go("forbidden");
                        });
                    });
                });
            });
        }), a.$on("$stateChangeSuccess", function(b, c, e, f, g) {
            c.name != f.name && (a.previousState = {
                state: f.name,
                params: g
            }), angular.element(d[0].getElementsByClassName("request-loader")).addClass("request-loader-hidden");
        });
    };
    angular.module("ygVendorApp").factory("errorHandler", [ "$q", "$localStorage", "$location", "$rootScope", a ]).config([ "$httpProvider", function(a) {
        a.interceptors.push("errorHandler");
    } ]).run([ "$rootScope", "Access", "$state", "$document", "constants", b ]);
}(), function() {
    "use strict";
    var a = function(a, b) {
        return {
            isAvailable: function() {
                return !(!a.previousState.state || "" === a.previousState.state);
            },
            redirectToPrevious: function() {
                b.go(a.previousState.state, a.previousState.params);
            }
        };
    };
    angular.module("ygVendorApp").factory("PreviousState", [ "$rootScope", "$state", a ]);
}(), function() {
    "use strict";
    var a = function(a) {
        var b = {
            request: function(b) {
                return b.headers = b.headers || {}, a.token && (b.headers.Authorization = "Token " + a.token), 
                b;
            }
        };
        return b;
    };
    angular.module("ygVendorApp").factory("tokenInjector", [ "$localStorage", a ]).config([ "$httpProvider", function(a) {
        a.interceptors.push("tokenInjector");
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        var d = {}, e = function() {
            var f = a.defer();
            return c.profile(function(a) {
                d.hasOwnProperty("role") && delete d.role, d.hasOwnProperty("name") && delete d.name, 
                d.hasOwnProperty("is_authenticated") && delete d.is_authenticated, f.resolve(angular.extend(d, a, {
                    $refresh: e,
                    $getUsername: function() {
                        return d.name;
                    },
                    $getUserRole: function() {
                        return d.role;
                    },
                    $clearUserRole: function() {
                        return b.$resetUserRole();
                    },
                    $hasRole: function(a) {
                        return d.role === a;
                    },
                    $hasAnyRole: function(a) {
                        return a.indexOf(d.role) >= 0;
                    },
                    $isAuthenticated: function() {
                        return d.is_authenticated;
                    },
                    $isAnonymous: function() {
                        return !d.is_authenticated;
                    }
                }));
            }, function(a) {
                d = {}, f.resolve(angular.extend(d, {
                    $refresh: e,
                    $clearUserRole: function() {
                        return b.$resetUserRole();
                    },
                    $hasRole: function(a) {
                        return d.role == a;
                    },
                    $hasAnyRole: function(a) {
                        return a.indexOf(d.role) >= 0;
                    },
                    $isAuthenticated: function() {
                        return d.is_authenticated;
                    },
                    $isAnonymous: function() {
                        return !d.is_authenticated;
                    }
                }));
            }), f.promise;
        };
        return e();
    };
    angular.module("ygVendorApp").factory("UserProfile", [ "$q", "role", "Profile", a ]);
}(), function() {
    "use strice";
    var a = function(a, b) {
        var c = {
            userrole: "anonymous",
            authenticated: !1,
            $resetUserRole: function() {
                return b.$reset(), userrole = "anonymous", authenticated = !1, {
                    userrole: userrole,
                    is_authenticated: authenticated
                };
            },
            $setUserRole: function(a) {
                a ? (userrole = a, authenticated = !0) : (userrole = "anonymous", authenticated = !1);
            },
            $getUserRole: function() {
                return {
                    userrole: userrole,
                    is_authenticated: authenticated
                };
            }
        };
        return c;
    };
    angular.module("ygVendorApp").factory("role", [ "$base64", "$localStorage", a ]);
}(), function() {
    "use strict";
    var a = function() {
        return {
            scope: {
                workbookData: "="
            },
            restrict: "AE",
            link: function(a, b, c, d) {
                var e = function() {
                    alasql('SELECT * INTO XLSX("orders.xlsx",{headers:true}) FROM ?', [ a.workbookData ]);
                };
                b.bind("click", e);
            }
        };
    };
    angular.module("ygVendorApp").directive("ydExcelDownload", a);
}(), function() {
    "use strict";
    angular.module("ygVendorApp").directive("ydPagination", [ function() {
        return {
            scope: {
                total: "@",
                totalPage: "@",
                params: "=",
                listLength: "@",
                paginate: "=",
                pending: "@?",
                unassigned: "@?",
                getData: "&"
            },
            restrict: "AE",
            link: function(a, b, c, d) {
                a.orderFrom = 50 * (a.params.page - 1) + 1, a.orderTo = a.orderFrom - 1 + parseInt(a.listLength), 
                a.pageRange = function() {
                    return new Array(parseInt(a.totalPage));
                };
            },
            template: [ '<div class="ydPagination md-whiteframe-z2" layout="row" layout-align="start center">', '<div class="stats" layout="row">', '<p ng-if="pending"> <span class="pending-text">Pending: </span><span class="pending">{{pending}}</span> </p>', '<p ng-if="unassigned"><span class="unassigned-text">Unassigned: </span><span class="unassigned">{{unassigned}}</span> </p>', "<p>Total: {{total}} </p>", "</div>", "<span flex></span>", '<div class="pagination" layout="row" layout-align="start center">', "<p>Page:</p>", '<md-input-container class="md-accent">', '<md-select class="md-warn" ng-model="params.page" ng-change="getData()" aria-label="page select">', '<md-option class="md-accent" ng-repeat="page in pageRange() track by $index" value="{{$index + 1}}">{{$index + 1}}</md-option>', "</md-select>", "</md-input-container>", "</div>", '<div class="pagination hide-xs" layout="row" layout-align="start center">', "<p>{{orderFrom}} -- {{orderTo}} of {{total}}</p>", "</div>", '<div class="page-navigation">', '<md-button ng-disabled="params.page == 1" ng-click="paginate.previouspage();" class="md-icon-button md-primary" aria-label="Menu Icon">', "<md-icon>arrow_backward</md-icon>", "</md-button>", '<md-button ng-disabled="params.page == totalPage" ng-click="paginate.nextpage();" class="md-icon-button md-primary" aria-label="Menu Icon">', "<md-icon>arrow_forward</md-icon>", "</md-button>", "</div>", "</div>" ].join("")
        };
    } ]);
}(), function() {
    "use strict";
    var a = function(a) {
        console.log("vendor");
    };
    angular.module("order", []).config([ "$stateProvider", function(a) {
        a.state("home.opsorder", {
            url: "^/all-orders?date&vendor_id&dg_username&order_status&page&start_time&end_time&is_cod&search&delivery_ids&pincodes&is_retail&vendor_name&dg_name",
            templateUrl: "/static/modules/order/list/list.html",
            controllerAs: "opsOrder",
            controller: "opsOrderCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER ];
                    return a.hasAnyRole(c);
                } ],
                orders: [ "Order", "$stateParams", function(a, b) {
                    return b.date = void 0 !== b.date ? new Date(b.date).toISOString() : new Date().toISOString(), 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), b.is_cod = "true" == b.is_cod ? Boolean(b.is_cod) : void 0, 
                    b.is_retail = "true" == b.is_retail ? Boolean(b.is_retail) : void 0, Array.isArray(b.order_status) && (b.order_status = b.order_status.length > 0 ? b.order_status.toString() : void 0), 
                    Array.isArray(b.pincodes) && (b.pincodes = b.pincodes.length > 0 ? b.pincodes.toString() : void 0), 
                    a.getOrders.query(b).$promise;
                } ],
                Pincodes: [ "DeliveryGuy", function(a) {
                    return a.dgServicablePincodes.query().$promise;
                } ]
            }
        }).state("home.orderDetail", {
            url: "^/order/detail/:id",
            templateUrl: "/static/modules/order/detail/detail.html",
            controllerAs: "orderDetail",
            controller: "orderDetailCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.VENDOR ];
                    return a.hasAnyRole(c);
                } ],
                order: [ "Order", "$stateParams", function(a, b) {
                    return a.getOrders.query(b).$promise;
                } ]
            }
        }).state("home.order", {
            url: "^/orders",
            templateUrl: "/static/modules/order/vendorOrders.html",
            controllerAs: "order",
            controller: "vendorOrderCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    return a.hasRole(b.userRole.VENDOR);
                } ]
            }
        });
    } ]).controller("vendorOrderCntrl", [ "$state", a ]);
}(), function() {
    "use strict";
    function a(a, b) {
        var c = this;
        this.assignment_data = {
            pickup: {
                dg_id: null,
                assignment_type: "pickup"
            },
            delivery: {
                dg_id: null,
                assignment_type: "delivery"
            }
        }, this.cancel = function() {
            a.cancel();
        }, this.answer = function(b) {
            a.hide(b);
        }, this.dgSearchTextChange = function(a) {
            var c = {
                search: a
            };
            return b.dgPageQuery.query(c).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.pickupDgChange = function(a) {
            a ? c.assignment_data.pickup.dg_id = a.id : c.assignment_data.pickup.dg_id = void 0;
        }, this.deliveryDgChange = function(a) {
            a ? c.assignment_data.delivery.dg_id = a.id : c.assignment_data.delivery.dg_id = void 0;
        };
    }
    var b = function(b, c, d) {
        return {
            openDgDialog: function() {
                var d = b("sm") || b("xs");
                return c.show({
                    controller: [ "$mdDialog", "DeliveryGuy", a ],
                    controllerAs: "assignDG",
                    templateUrl: "/static/modules/order/dialogs/assign-dg.html?nd=" + Date.now(),
                    parent: angular.element(document.body),
                    clickOutsideToClose: !1,
                    fullscreen: d,
                    openFrom: "#options",
                    closeTo: "#options"
                });
            }
        };
    };
    angular.module("order").factory("orderDgAssign", [ "$mdMedia", "$mdDialog", "DeliveryGuy", b ]);
}(), function() {
    "use strict";
    function a(a) {
        this.cod_object = {}, this.cancel = function() {
            a.cancel();
        }, this.answer = function(b) {
            a.hide(b);
        };
    }
    var b = function(b, c) {
        return {
            openCodDialog: function() {
                return c.show({
                    controller: [ "$mdDialog", a ],
                    controllerAs: "editCod",
                    templateUrl: "/static/modules/order/dialogs/edit-cod.html?nd=" + Date.now(),
                    parent: angular.element(document.body),
                    clickOutsideToClose: !1,
                    fullscreen: !1,
                    openFrom: "#options",
                    closeTo: "#options"
                });
            }
        };
    };
    angular.module("order").factory("EditCod", [ "$mdMedia", "$mdDialog", b ]);
}(), function() {
    "use strict";
    var a = function() {
        return a;
    };
    angular.module("order").factory("orderFilter", [ a ]);
}(), function() {
    "use strict";
    var a = function() {
        var a = {
            selectedItemArray: [],
            toggle: function(b) {
                var c = a.selectedItemArray.indexOf(b);
                c > -1 ? a.selectedItemArray.splice(c, 1) : a.selectedItemArray.push(b);
            },
            exists: function(b) {
                return a.selectedItemArray.indexOf(b) > -1;
            },
            addItem: function(b) {
                b.selected = !0, a.selectedItemArray.push(b);
            },
            removeItem: function(b) {
                var c = selectedItemArray.indexOf(b);
                return c > -1 ? (b.selected = !1, a.selectedItemArray.splice(c, 1), !0) : !1;
            },
            isSelected: function() {
                return a.selectedItemArray.length > 0;
            },
            clearAll: function() {
                return a.selectedItemArray = [], a.selectedItemArray;
            },
            slectedItemLength: function() {
                return a.selectedItemArray.length;
            },
            getAllItemsIds: function() {
                var b = [];
                return a.selectedItemArray.forEach(function(a) {
                    b.push(a.id);
                }), b;
            }
        };
        return a;
    };
    angular.module("order").factory("orderSelection", [ a ]);
}(), function() {
    "use strict";
    function a(a) {
        this.status_object = {
            data: {}
        }, this.cancel = function() {
            a.cancel();
        }, this.answer = function(b) {
            a.hide(b);
        };
    }
    var b = function(b, c) {
        return {
            openStatusDialog: function() {
                var d = b("sm") || b("xs");
                return c.show({
                    controller: [ "$mdDialog", a ],
                    controllerAs: "statusUpdate",
                    templateUrl: "/static/modules/order/dialogs/status-update.html?nd=" + Date.now(),
                    parent: angular.element(document.body),
                    clickOutsideToClose: !1,
                    fullscreen: d,
                    openFrom: "#options",
                    closeTo: "#options"
                });
            }
        };
    };
    angular.module("order").factory("OrderStatusUpdate", [ "$mdMedia", "$mdDialog", b ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
        var p = function() {
            return 0 !== q.params.order_status.length || void 0 !== q.params.vendor_id || void 0 !== q.params.dg_username || void 0 !== q.params.search || void 0 !== q.params.end_time || void 0 !== q.params.start_time || q.params.is_retail !== !1 || q.params.is_cod !== !1 || void 0 !== q.params.pincodes;
        }, q = this;
        this.params = e, this.params.order_status = e.order_status ? e.order_status.split(",") : [], 
        this.params.pincodes = e.pincodes ? e.pincodes.split(",") : [], this.params.date = new Date(this.params.date), 
        this.searchedDg = this.params.dg_name, this.searchVendor = this.params.vendor_name, 
        this.searchOrderActive = void 0 !== this.params.search, this.orders = i.payload.data.data, 
        this.total_pages = i.payload.data.total_pages, this.total_orders = i.payload.data.total_orders, 
        this.pending_orders_count = i.payload.data.pending_orders_count, this.unassigned_orders_count = i.payload.data.unassigned_orders_count, 
        this.pincodes = l.payload.data, 0 === q.orders.length && p() ? q.noContent = !0 : 0 !== q.orders.length || p() ? q.noContent = !1 : q.noContent = !0, 
        this.status_list = j.status, this.time_list = j.time, this.revertToPageOne = function() {
            q.params.page = 1, q.getOrders();
        }, this.resetParams = function() {
            q.params = {}, q.getOrders();
        }, this.backFromSearch = function() {
            q.params.search = void 0, q.searchOrderActive = !1, q.getOrders();
        }, this.toggleFilter = function() {
            b("order-filter").toggle();
        }, this.pageRange = function(a) {
            return new Array(a);
        }, this.paginate = {
            nextpage: function() {
                q.params.page = q.params.page + 1, q.getOrders();
            },
            previouspage: function() {
                q.params.page = q.params.page - 1, q.getOrders();
            }
        }, this.statusSelection = {
            toggle: function(a, b) {
                var c = b.indexOf(a.value);
                c > -1 ? b.splice(c, 1) : b.push(a.value);
            },
            exists: function(a, b) {
                return b.indexOf(a.value) > -1;
            }
        }, this.pincodesSelection = {
            toggle: function(a, b) {
                var c = b.indexOf(a.pincode);
                c > -1 ? b.splice(c, 1) : b.push(a.pincode);
            },
            exists: function(a, b) {
                return b.indexOf(a.pincode) > -1;
            }
        }, this.dgSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return f.dgPageQuery.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.selectedDgChange = function(a) {
            a ? (q.params.dg_username = a.phone_number, q.params.dg_name = a.name) : (q.params.dg_username = void 0, 
            q.params.dg_name = void 0);
        }, this.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return h.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, this.selectedVendorChange = function(a) {
            a ? (q.params.vendor_id = a.id, q.params.vendor_name = a.name) : (q.params.vendor_id = void 0, 
            q.params.vendor_name = void 0);
        }, this.handleOrdeSelection = {
            selectActive: k.isSelected(),
            numberOfSelectedOrder: k.slectedItemLength(),
            update: function() {
                q.handleOrdeSelection.selectActive = k.isSelected(), q.handleOrdeSelection.numberOfSelectedOrder = k.slectedItemLength();
            },
            toggle: function(a) {
                k.toggle(a), q.handleOrdeSelection.update();
            },
            exists: function(a) {
                return k.exists(a);
            },
            clear: function() {
                k.clearAll(), q.handleOrdeSelection.update();
            }
        }, q.assignDg = function() {
            n.openDgDialog().then(function(a) {
                a.pickup.delivery_ids = k.getAllItemsIds(), a.delivery.delivery_ids = k.getAllItemsIds(), 
                q.assignOrders(a);
            });
        }, q.assignDgForSingleOrder = function(a) {
            n.openDgDialog().then(function(b) {
                b.pickup.delivery_ids = [ a.id ], b.delivery.delivery_ids = [ a.id ], q.assignOrders(b);
            });
        }, q.assignOrders = function(a) {
            var b = [];
            a.pickup.dg_id && b.push(g.assignOrders.assign(a.pickup).$promise), a.delivery.dg_id && b.push(g.assignOrders.assign(a.delivery).$promise), 
            m.all(b).then(function(a) {
                k.clearAll(), q.getOrders();
            });
        }, this.statusUpdateForSingleDialog = function(a) {
            o.openStatusDialog().then(function(b) {
                b.delivery_ids = [ a.id ], "pickup" == b.status ? q.updatePickupStatus(b) : "delivered" == b.status ? q.updateDeliveryStatus(b) : "pickup_attempted" == b.status ? q.updatePickupAttemtedStatus(b) : "delivery_attempted" == b.status && q.updateDeliveryAtemptedStatus(b);
            });
        }, this.statusUpdateDialog = function() {
            o.openStatusDialog().then(function(a) {
                a.delivery_ids = k.getAllItemsIds(), "pickup" == a.status ? q.updatePickupStatus(a) : "delivered" == a.status ? q.updateDeliveryStatus(a) : "pickup_attempted" == a.status ? q.updatePickupAttemtedStatus(a) : "delivery_attempted" == a.status && q.updateDeliveryAtemptedStatus(a);
            });
        }, q.updatePickupStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(g.updatePickup.update(a.data).$promise);
            m.all(b).then(function(a) {
                k.clearAll(), q.getOrders();
            });
        }, q.updateDeliveryStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(g.updateDelivered.update(a.data).$promise);
            m.all(b).then(function(a) {
                k.clearAll(), q.getOrders();
            });
        }, q.updateDeliveryAtemptedStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(g.updateDeliveryAttempted.update(a.data).$promise);
            m.all(b).then(function(a) {
                k.clearAll(), q.getOrders();
            });
        }, q.updatePickupAttemtedStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(g.updatePickupAttempted.update(a.data).$promise);
            m.all(b).then(function(a) {
                k.clearAll(), q.getOrders();
            });
        }, this.revertOrSelect = function(b) {
            k.isSelected() ? q.handleOrdeSelection.toggle(b) : a.go("home.orderDetail", {
                id: b.id
            });
        }, this.getOrders = function() {
            q.params.vendor_id || (q.params.vendor_name = void 0), q.params.dg_username || (q.params.dg_name = void 0), 
            a.transitionTo(a.current, q.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("order").controller("opsOrderCntrl", [ "$state", "$mdSidenav", "$mdDialog", "$mdMedia", "$stateParams", "DeliveryGuy", "Order", "Vendor", "orders", "constants", "orderSelection", "Pincodes", "$q", "orderDgAssign", "OrderStatusUpdate", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(a, b) {
            var c, d, e = new Image();
            e.src = "data:image/png;base64," + a, e.onload = function() {
                var a = document.createElement("canvas"), f = a.getContext("2d");
                e.width >= e.height ? (c = 1024, d = 768) : (c = 768, d = 1024), f.canvas.width = c, 
                f.canvas.height = d, f.drawImage(e, 0, 0, e.width, e.height, 0, 0, c, d);
                var g = document.createElement("a"), h = document.createEvent("HTMLEvents");
                h.initEvent("click"), g.href = a.toDataURL(), g.download = b + ".png", g.dispatchEvent(h);
            };
        }
        function o(a) {
            for (var b = l.defer(), c = "", d = new Uint8Array(a.Body), e = 0, f = d.length; f > e; e++) c += String.fromCharCode(d[e]);
            var g = window.btoa(c);
            return g ? b.resolve(g) : b.reject("error creating base64 data"), b.promise;
        }
        function p(a, b) {
            q.getObject({
                Bucket: k.S3_BUCKET,
                Key: a.Key
            }, function(c, d) {
                if (c) b(c); else {
                    var e = o(d);
                    e.then(function(c) {
                        n(c, a.Key), b();
                    }, function(a) {
                        b(a);
                    });
                }
            });
        }
        var q = new AWS.S3(), r = this;
        r.params = b, r.order = d.payload.data;
        var s = function() {
            var a = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
            if (a) {
                var b = window.open("");
                return null === b || void 0 === typeof b;
            }
            return !1;
        };
        r.goBack = function() {
            j.isAvailable() ? j.redirectToPrevious() : a.go("home.opsorder");
        }, r.downloadPop = function() {
            var a = {
                Bucket: k.S3_BUCKET,
                Prefix: r.params.id + "/" + r.order.pickup_datetime.slice(0, 10) + "/pop"
            };
            r.download_image(a);
        }, r.downloadPod = function() {
            var a = {
                Bucket: k.S3_BUCKET,
                Prefix: r.params.id + "/" + r.order.pickup_datetime.slice(0, 10) + "/pod"
            };
            r.download_image(a);
        }, r.download_image = function(a) {
            m.loaderStart(), q.listObjects(a, function(a, b) {
                if (a) m.loaderComplete(), m.showError(a); else {
                    if (0 === b.Contents.length) return m.loaderComplete(), void m.showError("No Proof Found");
                    if (s()) {
                        var c = "To view the proofs! \nOption 1: Go to Safari —> Preferences —> Security —>  Block popup windows (Disable)\nOption 2: Use Chrome browser to download the images";
                        return m.loaderComplete(), void m.showError(c);
                    }
                    async.map(b.Contents, p, function(a, b) {
                        a ? (m.loaderComplete(), m.showError(a)) : (m.loaderComplete(), m.showSuccess("Proof Download Successful"));
                    });
                }
            });
        }, r.assignDgForSingleOrder = function(a) {
            g.openDgDialog().then(function(b) {
                b.pickup.delivery_ids = [ a.id ], b.delivery.delivery_ids = [ a.id ], r.assignOrders(b);
            });
        }, r.assignOrders = function(a) {
            var b = [];
            a.pickup.dg_id && b.push(f.assignOrders.assign(a.pickup).$promise), a.delivery.dg_id && b.push(f.assignOrders.assign(a.delivery).$promise), 
            m.loaderStart(), l.all(b).then(function(a) {
                r.getOrder();
            });
        }, r.updatePickupStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(f.updatePickup.update(a.data).$promise);
            m.loaderStart(), l.all(b).then(function(a) {
                r.getOrder();
            });
        }, r.updateDeliveryStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(f.updateDelivered.update(a.data).$promise);
            m.loaderStart(), l.all(b).then(function(a) {
                r.getOrder();
            });
        }, r.updateDeliveryAtemptedStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(f.updateDeliveryAttempted.update(a.data).$promise);
            m.loaderStart(), l.all(b).then(function(a) {
                r.getOrder();
            });
        }, r.updatePickupAttemtedStatus = function(a) {
            for (var b = [], c = 0; c < a.delivery_ids.length; c++) a.data.id = a.delivery_ids[c], 
            b.push(f.updatePickupAttempted.update(a.data).$promise);
            m.loaderStart(), l.all(b).then(function(a) {
                r.getOrder();
            });
        }, r.statusUpdateDialog = function(a) {
            h.openStatusDialog().then(function(b) {
                b.delivery_ids = [ a.id ], "pickup" == b.status ? r.updatePickupStatus(b) : "delivered" == b.status ? r.updateDeliveryStatus(b) : "pickup_attempted" == b.status ? r.updatePickupAttemtedStatus(b) : "delivery_attempted" == b.status && r.updateDeliveryAtemptedStatus(b);
            });
        }, r.editCodDialog = function(a) {
            i.openCodDialog().then(function(b) {
                m.loaderStart(), b.id = a.id, f.editCODAmount.update(b, function(a) {
                    m.showSuccess("COD amount updated successfully"), r.getOrder();
                });
            });
        }, r.getOrder = function() {
            a.transitionTo(a.current, r.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("order").controller("orderDetailCntrl", [ "$state", "$stateParams", "$rootScope", "order", "DeliveryGuy", "Order", "orderDgAssign", "OrderStatusUpdate", "EditCod", "PreviousState", "constants", "$q", "Notification", a ]);
}(), function() {
    "use strict";
    angular.module("deliveryguy", []).config([ "$stateProvider", function(a) {
        a.state("home.dgList", {
            url: "^/deliveryguy/list?start_date&end_date&attendance&search&page",
            templateUrl: "/static/modules/deliveryguy/list/list.html",
            controllerAs: "dgList",
            controller: "dgListCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                dgs: [ "DeliveryGuy", "$stateParams", function(a, b) {
                    var c, d;
                    return b.start_date ? (b.start_date = moment(new Date(b.start_date)), b.start_date.startOf("day")) : (c = moment(), 
                    c.startOf("day")), b.end_date ? (b.end_date = moment(new Date(b.end_date)), b.end_date.endOf("day")) : (d = moment(), 
                    d.endOf("day")), b.start_date = void 0 !== b.start_date ? b.start_date.toISOString() : c.toISOString(), 
                    b.end_date = void 0 !== b.end_date ? b.end_date.toISOString() : d.toISOString(), 
                    b.attendance = void 0 !== b.attendance ? b.attendance : "ALL", b.page = isNaN(b.page) ? 1 : parseInt(b.page), 
                    a.dgPageQuery.query(b).$promise;
                } ]
            }
        }).state("home.dgCreate", {
            url: "^/deliveryguy/create",
            templateUrl: "/static/modules/deliveryguy/create/create.html",
            controllerAs: "dgCreate",
            controller: "dgCreateCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    return a.hasRole(b.userRole.HR);
                } ],
                leadUserList: [ "DeliveryGuy", "$q", function(a, b) {
                    return b.all({
                        TeamLead: a.dgTeamLeadQuery.query().$promise,
                        OpsManager: a.dgOpsManagerQuery.query().$promise
                    });
                } ]
            }
        }).state("home.dgDetail", {
            url: "^/deliveryguy/detail/:id",
            templateUrl: "/static/modules/deliveryguy/detail/detail.html",
            controllerAs: "dgDetail",
            controller: "dgDetailCntrl",
            resolve: {
                DeliveryGuy: "DeliveryGuy",
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                DG: [ "DeliveryGuy", "$stateParams", function(a, b) {
                    new a.dg();
                    return a.dg.get(b).$promise;
                } ],
                leadUserList: [ "DeliveryGuy", "$q", function(a, b) {
                    return b.all({
                        TeamLead: a.dgTeamLeadQuery.query().$promise,
                        OpsManager: a.dgOpsManagerQuery.query().$promise
                    });
                } ]
            }
        });
    } ]);
}(), function() {
    "use strict";
    var a = {
        shift_timings: [ {
            start_time: "06:00:00",
            end_time: "15:00:00"
        }, {
            start_time: "07:00:00",
            end_time: "16:00:00"
        }, {
            start_time: "09:00:00",
            end_time: "18:00:00"
        }, {
            start_time: "10:00:00",
            end_time: "19:00:00"
        }, {
            start_time: "10:30:00",
            end_time: "19:30:00"
        }, {
            start_time: "11:00:00",
            end_time: "20:00:00"
        }, {
            start_time: "13:00:00",
            end_time: "22:00:00"
        }, {
            start_time: "14:00:00",
            end_time: "23:00:00"
        } ],
        transportation_mode: [ {
            key: "Biker",
            value: "BIKER"
        }, {
            key: "Walker",
            value: "WALKER"
        }, {
            key: "Car Driver",
            value: "CAR_DRIVER"
        } ]
    };
    angular.module("deliveryguy").constant("dgConstants", a);
}(), function() {
    "use strict";
    var a = function(a) {
        return function(a) {
            if (a) {
                var b = a.split(":");
                return moment().hour(b[0]).minute(b[1]).format("hh:mm A");
            }
            return !1;
        };
    };
    angular.module("deliveryguy").filter("timeAsDate", [ "$filter", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g) {
        var h = this;
        this.params = c, this.params.start_date = new Date(this.params.start_date), this.params.end_date = new Date(this.params.end_date), 
        this.dg_status = e.dg_status, this.searchDgActive = void 0 !== this.params.search, 
        this.dgs = d.payload.data.data, this.total_pages = d.payload.data.total_pages, this.total_dgs = d.payload.data.total_dg_count, 
        this.toggleFilter = function() {
            b("dgList-filter").toggle();
        }, this.resetParams = function() {
            h.params = {}, h.getDgs();
        }, this.paginate = {
            nextpage: function() {
                h.params.page = h.params.page + 1, h.getDgs();
            },
            previouspage: function() {
                h.params.page = h.params.page - 1, h.getDgs();
            }
        }, this.revertToPageOne = function() {
            h.params.page = 1, h.getDgs();
        }, this.backFromSearch = function() {
            h.params.search = void 0, h.searchDgActive = !1, h.getDgs();
        }, this.downloadAttendance = function() {
            g.loaderStart();
            var a = {
                start_date: moment(h.params.start_date).startOf("day").toISOString(),
                end_date: moment(h.params.end_date).endOf("day").toISOString()
            };
            f.dgsAttendance.query(a, function(a) {
                alasql('SEARCH / AS @a UNION ALL(attendance / AS @b RETURN(@a.name AS Name , IsoToDate(@b.date) AS DATE, @b.worked_hrs AS Hours)) INTO XLSX("attendance.xlsx",{headers:true}) FROM ?', [ a.payload.data ]), 
                g.loaderComplete();
            });
        }, this.getDgs = function() {
            a.transitionTo(a.current, h.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("deliveryguy").controller("dgListCntrl", [ "$state", "$mdSidenav", "$stateParams", "dgs", "constants", "DeliveryGuy", "Notification", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f) {
        var g = this;
        g.shift_timings = c.shift_timings, g.transportation_mode = c.transportation_mode, 
        g.OpsManagers = e.OpsManager.payload.data, g.TeamLeads = e.TeamLead.payload.data, 
        g.dg = new d.dg(), g.goBack = function() {
            f.isAvailable() ? f.redirectToPrevious() : a.go("home.dgList");
        }, g.create = function() {
            g.dg.shift_timing = angular.fromJson(g.dg.shift_timing), g.dg.$save(function() {
                g.goBack();
            });
        };
    };
    angular.module("deliveryguy").controller("dgCreateCntrl", [ "$state", "$mdSidenav", "dgConstants", "DeliveryGuy", "leadUserList", "PreviousState", a ]);
}(), function() {
    "use strict";
    function a(a, b, c, d, e) {
        var f = this;
        f.DG = angular.copy(c), f.DG.team_lead_dg_ids = [], f.DG.ops_manager_ids = [], f.DG.team_leads.forEach(function(a) {
            a.dg_id && f.DG.team_lead_dg_ids.push(a.dg_id);
        }), f.DG.ops_managers.forEach(function(a) {
            f.DG.ops_manager_ids.push(a.employee_id);
        }), f.OpsManagers = d, f.TeamLeads = e, f.shift_timings = b.shift_timings, f.transportation_mode = b.transportation_mode, 
        f.findShiftTime = function(a) {
            return f.shift_timings.findIndex(function(b) {
                return b.start_time == a.start_time;
            });
        }, f.DG.shift_time = f.shift_timings[f.findShiftTime(f.DG.shift_time)], console.log(f.DG.shift_time), 
        f.cancel = function() {
            a.cancel();
        }, f.answer = function(b) {
            a.hide(b);
        };
    }
    function b(a, b, c) {
        var d = this;
        d.DG = b, d.selectedTeamMembers = [], d.selectedPincodes = [], d.teamLeadData = {
            id: b.id,
            pincodes: [],
            associate_dgs: []
        }, d.cancel = function() {
            a.cancel();
        }, c.dgServicablePincodes.query().$promise.then(function(a) {
            d.pincodes = a.payload.data;
        }), d.addTeamDgs = function(a) {
            d.teamLeadData.associate_dgs.push(a.id);
        }, d.removeTeamDgs = function(a) {
            var b = d.teamLeadData.associate_dgs.indexOf(a.id);
            d.teamLeadData.associate_dgs.splice(b, 1);
        }, d.addTlPincode = function(a) {
            d.teamLeadData.pincodes.push(a.pincode);
        }, d.removeTlPincode = function(a) {
            var b = d.teamLeadData.pincodes.indexOf(a.pincode);
            d.teamLeadData.pincodes.splice(b, 1);
        }, d.dgSearch = function(a) {
            var b = {
                search: a
            };
            return c.dgPageQuery.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, d.transformChip = function(a) {
            return angular.isObject(a) ? {
                name: a.name,
                phone_number: a.phone_number,
                id: a.id
            } : void 0;
        }, d.transformPinChip = function(a) {
            return angular.isObject(a) ? a : void 0;
        }, d.submitTlData = function() {
            a.hide(d.teamLeadData);
        };
    }
    function c(a, b) {
        var c = this;
        c.DG = b, c.cancel = function() {
            a.cancel();
        }, c.answer = function(b) {
            b.id = c.DG.id, a.hide(b);
        };
    }
    var d = function(d, e, f, g, h, i, j, k, l, m) {
        var n = this;
        n.params = e, n.DG = k.payload.data, n.attendance_date = moment().date(1).toDate(), 
        n.attendanceMinDate = moment("2015-01-01").toDate(), n.attendanceMaxDate = moment().toDate(), 
        n.OpsManagers = j.OpsManager.payload.data, n.TeamLeads = j.TeamLead.payload.data, 
        n.showEditDialog = function() {
            var b = g("sm") || g("xs");
            f.show({
                controller: [ "$mdDialog", "dgConstants", "DG", "OpsManagers", "TeamLeads", a ],
                controllerAs: "dgEdit",
                templateUrl: "/static/modules/deliveryguy/dialogs/edit.html?nd=" + Date.now(),
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                fullscreen: b,
                openFrom: "#dgEditDialog",
                closeTo: "#dgEditDialog",
                locals: {
                    DG: n.DG,
                    OpsManagers: n.OpsManagers,
                    TeamLeads: n.TeamLeads
                }
            }).then(function(a) {
                m.loaderStart(), a.shift_time = angular.fromJson(a.shift_time), h.dg.$update(a, function(a) {
                    n.getDgDetails(), m.loaderComplete();
                });
            }, function() {
                n.status = "You cancelled the dialog.";
            });
        }, n.goBack = function() {
            l.isAvailable() ? l.redirectToPrevious() : d.go("home.dgList");
        }, n.deactivateDgDialog = function() {
            var a = g("sm") || g("xs");
            f.show({
                controller: [ "$mdDialog", "DG", c ],
                controllerAs: "dgDeactivate",
                templateUrl: "/static/modules/deliveryguy/dialogs/deactivate.html?nd=" + Date.now(),
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                fullscreen: a,
                locals: {
                    DG: n.DG
                }
            }).then(function(a) {
                m.loaderStart(), h.dg.deactivate(a, function(a) {
                    m.loaderComplete(), m.showSuccess("DG deactivated successfully"), n.getDgDetails();
                });
            });
        }, n.onlyMonthsPredicate = function(a) {
            var b = moment(a).date();
            return 1 === b;
        }, n.getTeamMembers = function() {
            h.dg.associated_dgs({
                id: n.DG.id
            }, function(a) {
                n.associated_dg_list = a.payload.data;
            });
        }, n.toTeamlead = function() {
            f.show({
                controller: [ "$mdDialog", "DG", "DeliveryGuy", b ],
                controllerAs: "dgTeamLead",
                templateUrl: "/static/modules/deliveryguy/dialogs/teamlead.html?nd=" + Date.now(),
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                fullscreen: !0,
                locals: {
                    DG: n.DG
                }
            }).then(function(a) {
                m.loaderStart(), n.DG.is_teamlead ? h.dg.$update(a, function(a) {
                    m.loaderComplete(), n.getDgDetails();
                }) : h.dg.promoteToTL(a, function(a) {
                    m.loaderComplete(), n.getDgDetails();
                });
            }, function() {
                n.status = "You cancelled the dialog.";
            });
        }, n.getAttendance = function() {
            var a = {
                id: n.DG.id,
                month: moment(n.attendance_date).month() + 1,
                year: moment(n.attendance_date).year()
            };
            h.dg.attendance(a, function(a) {
                n.dg_monthly_attendance = a.payload.data.attendance;
            });
        }, n.getDgDetails = function() {
            d.transitionTo(d.current, n.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("deliveryguy").controller("dgDetailCntrl", [ "$state", "$stateParams", "$mdDialog", "$mdMedia", "DeliveryGuy", "dgConstants", "leadUserList", "DG", "PreviousState", "Notification", d ]);
}(), function() {
    "use strict";
    angular.module("vendor", []).config([ "$stateProvider", function(a) {
        a.state("home.vendorList", {
            url: "^/vendor/list?date&search&page",
            templateUrl: "/static/modules/vendor/list/list.html",
            controllerAs: "vendorList",
            controller: "vendorListCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.ACCOUNTS, b.userRole.HR ];
                    return a.hasAnyRole(c);
                } ],
                vendors: [ "Vendor", "$stateParams", function(a, b) {
                    return b.date = void 0 !== b.date ? new Date(b.date).toISOString() : new Date().toISOString(), 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.query(b).$promise;
                } ]
            }
        });
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d) {
        var e = this;
        e.params = c, this.searchVendorActive = void 0 !== this.params.search, e.vendors = d.payload.data.data, 
        e.total_pages = d.payload.data.total_pages, e.total_vendors = d.payload.data.total_vendor_count, 
        e.paginate = {
            nextpage: function() {
                e.params.page = e.params.page + 1, e.getVendors();
            },
            previouspage: function() {
                e.params.page = e.params.page - 1, e.getVendors();
            }
        }, e.backFromSearch = function() {
            e.params.search = void 0, e.searchVendorActive = !1, e.getVendors();
        }, e.getVendors = function() {
            a.transitionTo(a.current, e.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("vendor").controller("vendorListCntrl", [ "$state", "$mdSidenav", "$stateParams", "vendors", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f) {
        var g = this;
        g.params = b, g.searchVendor = g.params.vednor_name, this.searchVendorActive = void 0 !== this.params.vendor_id, 
        g.report_stats = e.payload.data, g.params.start_date = new Date(g.params.start_date), 
        g.params.end_date = new Date(g.params.end_date), g.maxStartDate = moment().toDate(), 
        g.minStartDate = moment("2015-01-01").toDate(), g.maxEndDate = moment(g.params.start_date).add(3, "months").toDate(), 
        this.backFromSearch = function() {
            g.params.vendor_id = void 0, g.params.vednor_name = void 0, g.searchVendorActive = !1, 
            g.getReports();
        }, g.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return d.query(b).$promise.then(function(a) {
                return g.params.vendor_id && a.payload.data.data.push({
                    name: "All Vendors"
                }), a.payload.data.data;
            });
        }, g.selectedVendorChange = function(a) {
            a.id ? (g.params.vendor_id = a.id, g.params.vednor_name = a.name) : (g.params.vendor_id = void 0, 
            g.params.vednor_name = void 0), g.getReports();
        }, g.manipulateGraph = function() {
            g.graphData = {
                chart: {
                    plotGradientColor: " ",
                    plotSpacePercent: "60",
                    caption: "Order Details",
                    xaxisname: "Dates",
                    showalternatehgridcolor: "0",
                    placevaluesinside: "1",
                    toolTipSepChar: "=",
                    showborder: "0",
                    showvalues: "0",
                    showplotborder: "0",
                    showcanvasborder: "0",
                    theme: "fint"
                },
                categories: [ {
                    category: []
                } ],
                dataset: [ {
                    seriesname: "Total Delivered",
                    color: "39B54A",
                    data: []
                }, {
                    seriesname: "Total Attempted",
                    color: "00CCFF",
                    data: []
                }, {
                    seriesname: "Total Intransit",
                    color: "FCC06A",
                    data: []
                }, {
                    seriesname: "Total Queued",
                    color: "FE5E64",
                    data: []
                }, {
                    seriesname: "Total Cancelled",
                    color: "A6A6A6",
                    data: []
                } ]
            };
            for (var a = 0; a < g.report_stats.orders.length; a++) g.graphData.categories[0].category[a] = {}, 
            g.graphData.categories[0].category[a].label = g.report_stats.orders[a].date.slice(8, 10), 
            g.graphData.dataset[0].data[a] = {
                value: g.report_stats.orders[a].delivered_count,
                toolText: "Total Delivered:" + g.report_stats.orders[a].delivered_count + "{br} Total Placed:" + g.report_stats.orders[a].total_orders_count + "{br}" + new Date(g.report_stats.orders[a].date).toDateString()
            }, g.graphData.dataset[1].data[a] = {
                value: g.report_stats.orders[a].delivery_attempted_count + g.report_stats.orders[a].pickup_attempted_count,
                toolText: "Total Attempted:" + (g.report_stats.orders[a].delivery_attempted_count + g.report_stats.orders[a].pickup_attempted_count) + "{br} Total Placed:" + g.report_stats.orders[a].total_orders_count + "{br}" + new Date(g.report_stats.orders[a].date).toDateString()
            }, g.graphData.dataset[2].data[a] = {
                value: g.report_stats.orders[a].intransit_count,
                toolText: "Total Intransit:" + g.report_stats.orders[a].intransit_count + "{br} Total Placed:" + g.report_stats.orders[a].total_orders_count + "{br}" + new Date(g.report_stats.orders[a].date).toDateString()
            }, g.graphData.dataset[3].data[a] = {
                value: g.report_stats.orders[a].queued_count,
                toolText: "Total Queued:" + g.report_stats.orders[a].queued_count + "{br} Total Placed:" + g.report_stats.orders[a].total_orders_count + "{br}" + new Date(g.report_stats.orders[a].date).toDateString()
            }, g.graphData.dataset[4].data[a] = {
                value: g.report_stats.orders[a].cancelled_count,
                toolText: "Total Cancelled:" + g.report_stats.orders[a].cancelled_count + "{br} Total Placed:" + g.report_stats.orders[a].total_orders_count + "{br}" + new Date(g.report_stats.orders[a].date).toDateString()
            };
        }, 0 !== g.report_stats.total_orders && g.manipulateGraph(), g.date_change = function() {
            moment(g.params.end_date).diff(g.params.start_date, "months") > 3 && (g.params.end_date = moment(g.params.start_date).add(3, "months").toDate()), 
            moment(g.params.end_date).diff(g.params.start_date, "days") < 0 && (g.params.end_date = g.params.start_date), 
            g.getReports();
        }, g.downloadReportExcel = function() {
            f.loaderStart(), c.reportsExcel.get(g.params, function(a) {
                alasql('SELECT * INTO XLSX("YG_REPORT.xlsx",{headers:true}) FROM ?', [ a.payload.data ]), 
                f.loaderComplete();
            });
        }, g.getReports = function() {
            f.loaderStart(), g.params.vendor_id || (g.params.vednor_name = void 0), a.transitionTo(a.current, g.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("reports", [ "ng-fusioncharts" ]).config([ "$stateProvider", function(a) {
        a.state("home.reports", {
            url: "^/reports?start_date&end_date&vendor_id&vednor_name",
            templateUrl: "/static/modules/reports/reports.html",
            controllerAs: "reports",
            controller: "reportsCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.VENDOR ];
                    return a.hasAnyRole(c);
                } ],
                report: [ "Reports", "$stateParams", function(a, b) {
                    var c, d;
                    return b.start_date ? (b.start_date = moment(new Date(b.start_date)), b.start_date.startOf("day")) : (c = moment(), 
                    c.startOf("day")), b.end_date ? (b.end_date = moment(new Date(b.end_date)), b.end_date.endOf("day")) : (d = moment(), 
                    d.endOf("day")), b.start_date = void 0 !== b.start_date ? b.start_date.toISOString() : c.toISOString(), 
                    b.end_date = void 0 !== b.end_date ? b.end_date.toISOString() : d.toISOString(), 
                    a.getReport.stats(b).$promise;
                } ]
            }
        });
    } ]).controller("reportsCntrl", [ "$state", "$stateParams", "Reports", "Vendor", "report", "Notification", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c) {
        "home.cod.deposit" == a.current.name ? this.selectedIndex = 0 : "home.cod.transfer" == a.current.name ? this.selectedIndex = 1 : "home.cod.history" == a.current.name ? this.selectedIndex = 2 : this.selectedIndex = 0, 
        this.toggleFilter = function() {
            c("cod-filter").toggle();
        };
    };
    angular.module("Cod", []).config([ "$stateProvider", function(a) {
        a.state("home.cod", {
            url: "^/cod",
            templateUrl: "/static/modules/cod/cod.html",
            controllerAs: "cod",
            controller: "codCntrl",
            redirectTo: "home.cod.deposit",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.ACCOUNTS ];
                    return a.hasAnyRole(c);
                } ]
            }
        });
    } ]).controller("codCntrl", [ "$state", "$stateParams", "$mdSidenav", a ]);
}(), function() {
    "use strict";
    function a(a, b) {
        var c = this;
        c.deposit = b, c.cancel = function() {
            a.cancel();
        }, c.answer = function(b) {
            b.is_accepted = !0, a.hide(b);
        };
    }
    function b(a, b) {
        var c = this;
        c.deposit = b, c.verifyAmount = function(a) {
            return a && a.pending_salary_deduction ? !(parseFloat(a.pending_salary_deduction) > 0 && parseFloat(a.pending_salary_deduction) <= c.deposit.cod_amount) : !0;
        }, c.cancel = function() {
            a.cancel();
        }, c.answer = function(b) {
            b.pending_salary_deduction = parseFloat(b.pending_salary_deduction), b.is_accepted = !1, 
            b.transaction_id = c.deposit.transaction_id, a.hide(b);
        };
    }
    var c = function(c, d, e, f, g, h) {
        var i = this;
        i.params = d, i.deposits = f.payload.data.all_transactions, i.total_pages = f.payload.data.total_pages, 
        i.total_deposits = f.payload.data.total_count, this.searchVendor = this.params.vendor_id, 
        this.params.start_date && (this.params.start_date = new Date(this.params.start_date)), 
        this.params.end_date && (this.params.end_date = new Date(this.params.end_date)), 
        i.showImage = function(a) {
            a = a.replace(/:/g, "%3A");
            var b = "https://s3-ap-southeast-1.amazonaws.com/bank-deposit-test/" + a;
            i.showImageSection = !0, i.depositImage = b;
        }, i.verifyDeposit = function(b) {
            e.show({
                controller: [ "$mdDialog", "deposit", a ],
                controllerAs: "verifyDeposit",
                templateUrl: "/static/modules/cod/dialog/verify-deposit.html?nd=" + Date.now(),
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                locals: {
                    deposit: b
                }
            }).then(function(a) {
                h.loaderStart(), g.verifyDeposits.update(a, function(a) {
                    h.showSuccess("Deposit Verified Successfully"), h.loaderComplete(), i.getDeposits();
                });
            });
        }, i.declineDeposit = function(a) {
            e.show({
                controller: [ "$mdDialog", "deposit", b ],
                controllerAs: "declineDeposit",
                templateUrl: "/static/modules/cod/dialog/decline-deposit.html?nd=" + Date.now(),
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                locals: {
                    deposit: a
                }
            }).then(function(a) {
                h.loaderStart(), g.verifyDeposits.update(a, function(a) {
                    h.loaderComplete(), h.showSuccess("Deposit Declined Successfully"), i.getDeposits();
                });
            });
        }, this.paginate = {
            nextpage: function() {
                i.params.page = i.params.page + 1, i.getDgs();
            },
            previouspage: function() {
                i.params.page = i.params.page - 1, i.getDgs();
            }
        }, i.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return Vendor.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, i.selectedVendorChange = function(a) {
            a ? i.params.vendor_id = a.id : i.params.vendor_id = void 0;
        }, this.revertToPageOne = function() {
            i.params.page = 1, i.getDeposits();
        }, i.resetParams = function() {
            i.params = {}, i.getDeposits();
        }, this.getDeposits = function() {
            c.transitionTo(c.current, i.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("Cod").config([ "$stateProvider", function(a) {
        a.state("home.cod.deposit", {
            url: "^/cod/deposits?page&start_date&end_date&vendor_id",
            templateUrl: "/static/modules/cod/deposit/deposit.html",
            controllerAs: "deposit",
            controller: "codDepositCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.ACCOUNTS ];
                    return a.hasAnyRole(c);
                } ],
                deposits: [ "COD", "$stateParams", function(a, b) {
                    return b.start_date = void 0 !== b.start_date ? new Date(b.start_date).toISOString() : void 0, 
                    b.end_date = void 0 !== b.end_date ? new Date(b.end_date).toISOString() : void 0, 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.getDeposits.get(b).$promise;
                } ]
            }
        });
    } ]).controller("codDepositCntrl", [ "$state", "$stateParams", "$mdDialog", "deposits", "COD", "Notification", c ]);
}(), function() {
    "use strict";
    function a(a, b) {
        var c = this;
        c.total_cod_amount = 0, c.deposits = b, c.deposits.forEach(function(a) {
            c.total_cod_amount += a.cod_amount;
        }), c.cancel = function() {
            a.cancel();
        }, c.answer = function(b) {
            a.hide(b);
        };
    }
    var b = function(b, c, d, e, f, g, h) {
        var i = this;
        i.params = c, i.varifiedDeposits = e.payload.data.all_transactions, i.total_pages = e.payload.data.total_pages, 
        i.total_deposits = e.payload.data.total_count, this.searchVendor = this.params.vendor_name, 
        this.params.start_date && (this.params.start_date = new Date(this.params.start_date)), 
        this.params.end_date && (this.params.end_date = new Date(this.params.end_date)), 
        this.paginate = {
            nextpage: function() {
                i.params.page = i.params.page + 1, i.getDgs();
            },
            previouspage: function() {
                i.params.page = i.params.page - 1, i.getDgs();
            }
        }, this.handleSelection = {
            selectedItemArray: [],
            selectedVendor: void 0,
            toggle: function(a) {
                if (i.handleSelection.selectedItemArray.length > 0) {
                    if (a.vendor_id != i.handleSelection.selectedVendor) return void alert("You cannot select different vendor");
                } else i.handleSelection.selectedVendor = a.vendor_id;
                var b = i.handleSelection.selectedItemArray.indexOf(a);
                b > -1 ? i.handleSelection.selectedItemArray.splice(b, 1) : i.handleSelection.selectedItemArray.push(a);
            },
            exists: function(a) {
                return i.handleSelection.selectedItemArray.indexOf(a) > -1;
            },
            addItem: function(a) {
                a.selected = !0, i.handleSelection.selectedItemArray.push(a);
            },
            removeItem: function(a) {
                var b = i.selectedItemArray.indexOf(a);
                return b > -1 ? (a.selected = !1, i.handleSelection.selectedItemArray.splice(b, 1), 
                !0) : !1;
            },
            isSelected: function() {
                return i.handleSelection.selectedItemArray.length > 0;
            },
            clearAll: function() {
                return i.handleSelection.selectedItemArray = [], i.handleSelection.selectedVendor = void 0, 
                i.handleSelection.selectedItemArray;
            },
            slectedItemLength: function() {
                return i.handleSelection.selectedItemArray.length;
            },
            getAlltransactionIds: function() {
                var a = [];
                return i.handleSelection.selectedItemArray.forEach(function(b) {
                    a.push(b.delivery_id);
                }), a;
            }
        }, i.transferDeposit = function() {
            d.show({
                controller: [ "$mdDialog", "deposits", a ],
                controllerAs: "transferDeposit",
                templateUrl: "/static/modules/cod/dialog/transfer-deposit.html",
                parent: angular.element(document.body),
                clickOutsideToClose: !1,
                locals: {
                    deposits: i.handleSelection.selectedItemArray
                }
            }).then(function(a) {
                a.total_cod_transferred = parseInt(a.total_cod_transferred), a.delivery_ids = i.handleSelection.getAlltransactionIds(), 
                a.vendor_id = i.handleSelection.selectedVendor, g.loaderStart(), f.tranferToClient.send(a, function(a) {
                    g.showSuccess("Transfered Successfully"), g.loaderComplete(), i.handleSelection.clearAll(), 
                    i.getDeposits();
                }, function(a) {
                    g.loaderComplete();
                });
            });
        }, i.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return h.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, i.selectedVendorChange = function(a) {
            a ? (i.params.vendor_id = a.id, i.params.vendor_name = a.name) : (i.params.vendor_id = void 0, 
            i.params.vendor_name = void 0);
        }, this.revertToPageOne = function() {
            i.params.page = 1, i.getDeposits();
        }, i.resetParams = function() {
            i.params = {}, i.getDeposits();
        }, this.getDeposits = function() {
            i.params.vendor_id || (i.params.vendor_name = void 0), b.transitionTo(b.current, i.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("Cod").config([ "$stateProvider", function(a) {
        a.state("home.cod.transfer", {
            url: "^/cod/transfer?page&start_date&end_date&vendor_id&vendor_name",
            templateUrl: "/static/modules/cod/transfer/transfer.html",
            controllerAs: "transfer",
            controller: "codTransferCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.ACCOUNTS ];
                    return a.hasAnyRole(c);
                } ],
                varifiedDeposits: [ "COD", "$stateParams", function(a, b) {
                    return b.start_date = void 0 !== b.start_date ? new Date(b.start_date).toISOString() : void 0, 
                    b.end_date = void 0 !== b.end_date ? new Date(b.end_date).toISOString() : void 0, 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.getVerifiedDeposits.get(b).$promise;
                } ]
            }
        });
    } ]).controller("codTransferCntrl", [ "$state", "$stateParams", "$mdDialog", "varifiedDeposits", "COD", "Notification", "Vendor", b ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e) {
        var f = this;
        f.params = b, f.historyDeposits = c.payload.data.all_transactions, f.total_pages = c.payload.data.total_pages, 
        f.total_deposits = c.payload.data.total_count, this.searchVendor = this.params.vendor_name, 
        this.params.start_date && (this.params.start_date = new Date(this.params.start_date)), 
        this.params.end_date && (this.params.end_date = new Date(this.params.end_date)), 
        this.paginate = {
            nextpage: function() {
                f.params.page = f.params.page + 1, f.getDgs();
            },
            previouspage: function() {
                f.params.page = f.params.page - 1, f.getDgs();
            }
        }, f.vendorSearchTextChange = function(a) {
            var b = {
                search: a
            };
            return e.query(b).$promise.then(function(a) {
                return a.payload.data.data;
            });
        }, f.selectedVendorChange = function(a) {
            a ? (f.params.vendor_id = a.id, f.params.vendor_name = a.name) : (f.params.vendor_id = void 0, 
            f.params.vendor_name = void 0);
        }, this.revertToPageOne = function() {
            f.params.page = 1, f.getDeposits();
        }, f.resetParams = function() {
            f.params = {}, f.getDeposits();
        }, this.getDeposits = function() {
            f.params.vendor_id || (f.params.vendor_name = void 0), a.transitionTo(a.current, f.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("Cod").config([ "$stateProvider", function(a) {
        a.state("home.cod.history", {
            url: "^/cod/history?page&start_date&end_date&vendor_id&vendor_name",
            templateUrl: "/static/modules/cod/history/history.html",
            controllerAs: "history",
            controller: "codHistoryCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.ACCOUNTS ];
                    return a.hasAnyRole(c);
                } ],
                historyDeposits: [ "COD", "$stateParams", function(a, b) {
                    return b.start_date = void 0 !== b.start_date ? new Date(b.start_date).toISOString() : void 0, 
                    b.end_date = void 0 !== b.end_date ? new Date(b.end_date).toISOString() : void 0, 
                    b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.transactionHistory.get(b).$promise;
                } ]
            }
        });
    } ]).controller("codHistoryCntrl", [ "$state", "$stateParams", "historyDeposits", "Notification", "Vendor", a ]);
}(), function() {
    "use strict";
    angular.module("feedback", []).config([ "$stateProvider", function(a) {
        a.state("home.feedbackList", {
            url: "^/feedback/list?page",
            templateUrl: "/static/modules/feedback/list/list.html",
            controllerAs: "feedbackList",
            controller: "feedbackListCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.VENDOR ];
                    return a.hasAnyRole(c);
                } ],
                tickets: [ "Feedback", "$stateParams", function(a, b) {
                    return b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.getTickets.query(b).$promise;
                } ],
                groups: [ "Feedback", function(a) {
                    return a.getGroups.query().$promise;
                } ]
            }
        }).state("home.feedbackDetail", {
            url: "^/feedback/detail/:ticket_id",
            templateUrl: "/static/modules/feedback/detail/detail.html",
            controllerAs: "feedbackDetail",
            controller: "feedbackDetailCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER, b.userRole.SALES, b.userRole.SALES_MANAGER, b.userRole.VENDOR ];
                    return a.hasAnyRole(c);
                } ],
                ticket: [ "Feedback", "$stateParams", function(a, b) {
                    return a.getTicketsById.get(b).$promise;
                } ],
                groups: [ "Feedback", function(a) {
                    return a.getGroups.query().$promise;
                } ]
            }
        });
    } ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e) {
        var f = this;
        this.params = b, this.tickets = d.payload.data.data, this.total_pages = d.payload.data.total_pages, 
        this.total_tickets = d.payload.data.total_tickets, this.groups = e.payload.data, 
        this.paginate = {
            nextpage: function() {
                f.params.page = f.params.page + 1, f.getTickets();
            },
            previouspage: function() {
                f.params.page = f.params.page - 1, f.getTickets();
            }
        }, this.getGroupName = function(a) {
            if (f.groups) for (var b = 0; b < f.groups.length; b++) if (a == f.groups[b].group.id) return f.groups[b].group.name;
        }, this.getTickets = function() {
            a.transitionTo(a.current, f.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("feedback").controller("feedbackListCntrl", [ "$state", "$stateParams", "Feedback", "tickets", "groups", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f, g, h, i, j) {
        console.log(e);
        var k = this;
        this.params = b, this.ticket = e.payload.data.helpdesk_ticket, this.groups = f.payload.data, 
        k.goBack = function() {
            h.isAvailable() ? h.redirectToPrevious() : a.go("home.feedbackList");
        }, this.getGroupName = function(a) {
            if (k.groups) for (var b = 0; b < k.groups.length; b++) if (a == k.groups[b].group.id) return k.groups[b].group.name;
        }, this.getUsername = function(a) {
            return a == k.ticket.requester_id ? k.ticket.requester_name : k.ticket.responder_name;
        }, this.showConfirm = function(a) {
            var b = c.confirm().title("Are you sure you want to resolve this issue").ariaLabel("Resolve Feedback").targetEvent(a).ok("Confirm").cancel("Cancel");
            c.show(b).then(function() {
                k.closeComplain({});
            });
        }, this.addNotes = function(a) {
            g.loaderStart(), a.id = k.ticket.display_id, i.$getUserRole() === j.userRole.VENDOR ? a.note.helpdesk_note.user_id = k.ticket.requester_id : a.note.helpdesk_note.user_id = k.ticket.responder_id, 
            d.addNotes.update(a, function(a) {
                k.getTicket();
            });
        }, this.closeComplain = function(a) {
            g.loaderStart(), a.id = k.ticket.display_id, a.resolve = {
                helpdesk_ticket: {
                    status: "5"
                }
            }, d.resolve.update(a, function(a) {
                k.getTicket();
            });
        }, this.getTicket = function() {
            a.transitionTo(a.current, k.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("feedback").controller("feedbackDetailCntrl", [ "$state", "$stateParams", "$mdDialog", "Feedback", "ticket", "groups", "Notification", "PreviousState", "UserProfile", "constants", a ]);
}(), function() {
    "use strict";
    var a = function(a, b, c, d, e, f) {
        var g = this;
        g.params = c, g.notices = f.payload.data.data, g.total_notifications = f.payload.data.total_notifications, 
        g.total_pages = f.payload.data.total_pages, this.paginate = {
            nextpage: function() {
                g.params.page = g.params.page + 1, g.getTickets();
            },
            previouspage: function() {
                g.params.page = g.params.page - 1, g.getTickets();
            }
        }, d.$on("notificationUpdated", g.getNotification), this.makeAsRead = function(c) {
            e.markAsRead.update({
                id: c.notification_id
            }, function(d) {
                a.home.getNoticeCount(), c.delivery_id = c.delivery_id.split(","), 1 == c.delivery_id.length && -1 === c.delivery_id.indexOf("") ? b.go("home.orderDetail", {
                    id: c.delivery_id.join()
                }) : c.delivery_id.length > 1 ? b.go("home.opsorder", {
                    delivery_ids: c.delivery_id.join()
                }) : g.getNotification();
            });
        }, this.getNotifications = function() {
            b.transitionTo(b.current, g.params, {
                reload: !0,
                inherit: !1,
                notify: !0
            });
        };
    };
    angular.module("notification", []).config([ "$stateProvider", function(a) {
        a.state("home.notification", {
            url: "^/notification?page",
            templateUrl: "/static/modules/notification/notification.html",
            controllerAs: "notification",
            controller: "notificationCntrl",
            resolve: {
                access: [ "Access", "constants", function(a, b) {
                    var c = [ b.userRole.OPS, b.userRole.OPS_MANAGER ];
                    return a.hasAnyRole(c);
                } ],
                notices: [ "Notice", "$stateParams", function(a, b) {
                    return b.page = isNaN(b.page) ? 1 : parseInt(b.page), a.getNotifications.query(b).$promise;
                } ]
            }
        });
    } ]).controller("notificationCntrl", [ "$scope", "$state", "$stateParams", "$rootScope", "Notice", "notices", a ]);
}(), function() {
    "use strict";
    angular.module("notification").filter("fromNow", function() {
        return function(a) {
            return moment(a).fromNow();
        };
    });
}();
//# sourceMappingURL=main.min.js.map